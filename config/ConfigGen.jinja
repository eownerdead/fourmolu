{- FOURMOLU_DISABLE -}
{- ***** DO NOT EDIT: This module is autogenerated ***** -}

{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes #-}

module Ormolu.Config.Gen
  ( PrinterOpts (..)
  {% for fieldType in fieldTypes -%}
  , {{ fieldType.name }} (..)
  {% endfor -%}
  , emptyPrinterOpts
  , defaultPrinterOpts
  , fillMissingPrinterOpts
  , parsePrinterOptsCLI
  , parsePrinterOptsJSON
  , parsePrinterOptType
  )
where

import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import Data.Functor.Identity (Identity)
import qualified Data.Text as Text
import GHC.Generics (Generic)
import Text.Read (readEither)

{%- macro mk_printer_opts() -%}
  PrinterOpts
    {%- for option in options -%}
      {%- if option.fieldName %}
    {% if loop.first %}{ {% else %}, {% endif %}{{ caller(option) }}
      {%- endif -%}
    {%- endfor %}
    }
{%- endmacro %}

-- | Options controlling formatting output.
data PrinterOpts f =
  {% call(option) mk_printer_opts() -%}
      -- | {{ option.description }}
      {{ option.fieldName }} :: f {{ option.type }}
  {%- endcall %}
  deriving (Generic)

emptyPrinterOpts :: PrinterOpts Maybe
emptyPrinterOpts =
  {% call(option) mk_printer_opts() -%}
    {{ option.fieldName }} = Nothing
  {%- endcall %}

defaultPrinterOpts :: PrinterOpts Identity
defaultPrinterOpts =
  {% call(option) mk_printer_opts() -%}
    {{ option.fieldName }} = pure {{ option.default }}
  {%- endcall %}

-- | Fill the field values that are 'Nothing' in the first argument
-- with the values of the corresponding fields of the second argument.
fillMissingPrinterOpts ::
  forall f.
  Applicative f =>
  PrinterOpts Maybe ->
  PrinterOpts f ->
  PrinterOpts f
fillMissingPrinterOpts p1 p2 =
  {% call(option) mk_printer_opts() -%}
    {{ option.fieldName }} = maybe ({{ option.fieldName }} p2) pure ({{ option.fieldName }} p1)
  {%- endcall %}

parsePrinterOptsCLI ::
  Applicative f =>
  (forall a. PrinterOptsFieldType a => String -> String -> String -> f (Maybe a)) ->
  f (PrinterOpts Maybe)
parsePrinterOptsCLI f =
  pure PrinterOpts
    {%- for option in options if option.fieldName %}
    <*> f
      "{{ option.name }}"
      "{{ get_cli_help(option) }}"
      "{{ get_cli_placeholder(option) }}"
    {%- endfor %}

parsePrinterOptsJSON ::
  Applicative f =>
  (forall a. PrinterOptsFieldType a => String -> f (Maybe a)) ->
  f (PrinterOpts Maybe)
parsePrinterOptsJSON f =
  pure PrinterOpts
    {%- for option in options if option.fieldName %}
    <*> f "{{ option.name }}"
    {%- endfor %}

{---------- PrinterOpts field types ----------}

class Aeson.FromJSON a => PrinterOptsFieldType a where
  parsePrinterOptType :: String -> Either String a

instance PrinterOptsFieldType Int where
  parsePrinterOptType = readEither

instance PrinterOptsFieldType Bool where
  parsePrinterOptType s =
    case s of
      "false" -> Right False
      "true" -> Right True
      _ ->
        Left . unlines $
          [ "unknown value: " <> show s,
            "Valid values are: \"false\" or \"true\""
          ]

{% for fieldType in fieldTypes %}
{%- if fieldType.enum %}
data {{ fieldType.enum.name }}
  {% for option in fieldType.enum.options -%}
    {% if loop.first %}={% else %}|{% endif %} {{ option }}
  {% endfor -%}
  deriving (Eq, Show, Enum, Bounded)
{% endif %}
{%- if fieldType.adt %}
data {{ fieldType.adt.name }}
  {% for constructor in fieldType.adt.constructors -%}
    {% if loop.first %}={% else %}|{% endif %} {{ constructor }}
  {% endfor -%}
  deriving (Eq, Show)
{% endif -%}
{% endfor -%}

{% for fieldType in fieldTypes %}
{% if fieldType.enum -%}
instance Aeson.FromJSON {{ fieldType.enum.name }} where
  parseJSON =
    Aeson.withText "{{ fieldType.enum.name }}" $ \s ->
      either Aeson.parseFail pure $
        parsePrinterOptType (Text.unpack s)

instance PrinterOptsFieldType {{ fieldType.enum.name }} where
  parsePrinterOptType s =
    case s of
      {% for constructor, value in fieldType.enum.options.items() -%}
      "{{ value }}" -> Right {{ constructor }}
      {% endfor -%}
      _ ->
        Left . unlines $
          [ "unknown value: " <> show s
          , "Valid values are: {{ fieldType.enum.options_display }}"
          ]
{%- endif -%}
{%- if fieldType.adt -%}
instance Aeson.FromJSON {{ fieldType.adt.name }} where
  parseJSON = {{ fieldType.adt.parseJSON | indent(2) }}

instance PrinterOptsFieldType {{ fieldType.adt.name }} where
  parsePrinterOptType = {{ fieldType.adt.parsePrinterOptType | indent(2) }}
{%- endif %}
{% endfor %}
