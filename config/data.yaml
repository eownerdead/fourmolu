# ----- Source of truth for configuration fields ----- #
#
# This file contains two sections: the first is the list of
# options available in Fourmolu configuration, and the second
# is the definition of new Haskell types.

# Each option contains the following fields:
#   * name: (string) Name of key in config file + flag in CLI
#   * fieldName: (string|null) Name of PrinterOpts field (or null if
#       config is not in PrinterOpts)
#   * description: (string) Description of option in Haddocks + CLI
#   * type: (string) Haskell type of field
#   * default: (string|int|bool|list) Fourmolu default, as Haskell value
#   * ormolu: (string|int|bool|list) Option that mimics Ormolu's formatting, as Haskell value
#   * cli: (optional) Info for CLI
#       * help: (string, optional) Text to show in CLI help text; defaults to `description`
#       * default: (string, optional) Text to add to the CLI help text as the
#           default; defaults to rendered version of `default`
#       * placeholder: (string, optional) Placeholder to use in CLI help text;
#           by default, determined based on `type`
options:
  -
    name: indentation
    fieldName: poIndentation
    description: Number of spaces per indentation step
    type: Int
    default: 4
    ormolu: 2
  -
    name: function-arrows
    fieldName: poFunctionArrows
    description: Styling of arrows in type signatures
    type: FunctionArrowsStyle
    default: TrailingArrows
    ormolu: TrailingArrows
  -
    name: comma-style
    fieldName: poCommaStyle
    description: How to place commas in multi-line lists, records, etc.
    type: CommaStyle
    default: Leading
    ormolu: Trailing
  -
    name: import-export-style
    fieldName: poImportExportStyle
    description: Styling of import/export lists
    type: ImportExportStyle
    default: ImportExportDiffFriendly
    ormolu: ImportExportTrailing
  -
    name: indent-wheres
    fieldName: poIndentWheres
    description: Whether to full-indent or half-indent 'where' bindings past the preceding body
    type: Bool
    default: false
    ormolu: true
  -
    name: record-brace-space
    fieldName: poRecordBraceSpace
    description: Whether to leave a space before an opening record brace
    type: Bool
    default: false
    ormolu: true
  -
    name: newlines-between-decls
    fieldName: poNewlinesBetweenDecls
    description: Number of spaces between top-level declarations
    type: Int
    default: 1
    ormolu: 1
  -
    name: haddock-style
    fieldName: poHaddockStyle
    description: How to print Haddock comments
    type: HaddockPrintStyle
    default: HaddockMultiLine
    ormolu: HaddockSingleLine
  -
    name: haddock-style-module
    fieldName: poHaddockStyleModule
    description: How to print module docstring
    type: HaddockPrintStyleModule
    default: PrintStyleInherit
    ormolu: PrintStyleInherit
    cli:
      default: same as 'haddock-style'
  -
    name: let-style
    fieldName: poLetStyle
    description: Styling of let blocks
    type: LetStyle
    default: LetAuto
    ormolu: LetInline
  -
    name: in-style
    fieldName: poInStyle
    description: How to align the 'in' keyword with respect to the 'let' keyword
    type: InStyle
    default: InRightAlign
    ormolu: InRightAlign
  -
    name: unicode
    fieldName: poUnicode
    description: Output Unicode syntax
    type: Unicode
    default: UnicodeNever
    ormolu: UnicodeNever
  -
    name: respectful
    fieldName: poRespectful
    description: Give the programmer more choice on where to insert blank lines
    type: Bool
    default: true
    ormolu: false
  -
    name: fixities
    fieldName: null
    description: Fixity information for operators
    type: '[String]'
    default: []
    ormolu: []

# Each fieldType contains the following fields:
#   * name: (string) Name of data type
#
# And exactly one of the following fields:
#   * enum: List of enum options, mapping constructor name to string representation
#   * adt: Information for a custom field type
#       * constructors: List of strings, one for each constructor
#       * render: Mapping from Haskell value to string representation
#       * parseJSON: Implementation of `Aeson.parseJSON`
#       * parsePrinterOptType: Implementation of `String -> Either String a`
fieldTypes:
  -
    name: CommaStyle
    enum:
      - Leading: leading
      - Trailing: trailing
  -
    name: FunctionArrowsStyle
    enum:
      - TrailingArrows: trailing
      - LeadingArrows: leading
      - LeadingArgsArrows: leading-args
  -
    name: HaddockPrintStyle
    enum:
      - HaddockSingleLine: single-line
      - HaddockMultiLine: multi-line
      - HaddockMultiLineCompact: multi-line-compact
  -
    name: HaddockPrintStyleModule
    adt:
      constructors:
        - PrintStyleInherit
        - PrintStyleOverride HaddockPrintStyle
      render:
        PrintStyleInherit: 'null'
      parseJSON: |
        \v -> case v of
          Aeson.Null -> pure PrintStyleInherit
          Aeson.String "" -> pure PrintStyleInherit
          _ -> PrintStyleOverride <$> Aeson.parseJSON v
      parsePrinterOptType: |
        \s -> case s of
          "" -> pure PrintStyleInherit
          _ -> PrintStyleOverride <$> parsePrinterOptType s
  -
    name: ImportExportStyle
    enum:
      - ImportExportLeading: leading
      - ImportExportTrailing: trailing
      - ImportExportDiffFriendly: diff-friendly
  -
    name: LetStyle
    enum:
      - LetAuto: auto
      - LetInline: inline
      - LetNewline: newline
      - LetMixed: mixed
  -
    name: InStyle
    enum:
      - InLeftAlign: left-align
      - InRightAlign: right-align
  -
    name: Unicode
    enum:
      - UnicodeDetect: detect
      - UnicodeAlways: always
      - UnicodeNever: never
