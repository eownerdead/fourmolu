diff --git a/src/Swarm/Language/Parse.hs b/src/Swarm/Language/Parse.hs
index e72dc10..f5cebbd 100644
--- a/src/Swarm/Language/Parse.hs
+++ b/src/Swarm/Language/Parse.hs
@@ -285,12 +285,12 @@ parseTermAtom2 =
         <|> TBool <$> ((True <$ reserved "true") <|> (False <$ reserved "false"))
         <|> reserved "require"
           *> ( ( TRequireDevice
-                  <$> (textLiteral <?> "device name in double quotes")
+                   <$> (textLiteral <?> "device name in double quotes")
                )
-                <|> ( TRequire
-                        <$> (fromIntegral <$> integer)
-                        <*> (textLiteral <?> "entity name in double quotes")
-                    )
+                 <|> ( TRequire
+                         <$> (fromIntegral <$> integer)
+                         <*> (textLiteral <?> "entity name in double quotes")
+                     )
              )
         <|> uncurry SRequirements <$> (reserved "requirements" *> match parseTerm)
         <|> SLam
diff --git a/src/Swarm/TUI/Controller.hs b/src/Swarm/TUI/Controller.hs
index 536c50b..8bbddf0 100644
--- a/src/Swarm/TUI/Controller.hs
+++ b/src/Swarm/TUI/Controller.hs
@@ -340,9 +340,9 @@ handleMainEvent ev = do
         then -- ignore repeated keypresses
           continueWithoutRedraw
         else -- hide for two seconds
-        do
-          uiState . uiHideRobotsUntil .= t + TimeSpec 2 0
-          invalidateCacheEntry WorldCache
+          do
+            uiState . uiHideRobotsUntil .= t + TimeSpec 2 0
+            invalidateCacheEntry WorldCache
     -- debug focused robot
     MetaChar 'd' | isPaused && hasDebug -> do
       debug <- uiState . uiShowDebug Lens.<%= not
diff --git a/test/unit/TestLanguagePipeline.hs b/test/unit/TestLanguagePipeline.hs
index 15672e2..b0ea42a 100644
--- a/test/unit/TestLanguagePipeline.hs
+++ b/test/unit/TestLanguagePipeline.hs
@@ -168,8 +168,7 @@ testLanguagePipeline =
         "atomic - #479"
         [ testCase
             "atomic move"
-            ( valid "atomic move"
-            )
+            (valid "atomic move")
         , testCase
             "grabif"
             (valid "def grabif : text -> cmd unit = \\x. atomic (b <- ishere x; if b {grab; return ()} {}) end")
@@ -250,8 +249,7 @@ testLanguagePipeline =
         "void type"
         [ testCase
             "isSimpleUType"
-            ( assertBool "" $ isSimpleUType UTyVoid
-            )
+            (assertBool "" $ isSimpleUType UTyVoid)
         , testCase
             "valid type signature"
             (valid "def f : void -> a = \\x. undefined end")
diff --git a/test/unit/TestPretty.hs b/test/unit/TestPretty.hs
index 1c6fff5..a79ad08 100644
--- a/test/unit/TestPretty.hs
+++ b/test/unit/TestPretty.hs
@@ -88,8 +88,7 @@ testPrettyConst =
         )
     , testCase
         "void type"
-        ( assertEqual "" "void" . show $ ppr TyVoid
-        )
+        (assertEqual "" "void" . show $ ppr TyVoid)
     , testCase
         "type ascription"
         ( equalPretty "1 : int" $
