diff --git a/Cabal-syntax/src/Distribution/Compat/Prelude.hs b/Cabal-syntax/src/Distribution/Compat/Prelude.hs
index 3cbf3c1..4aa252c 100644
--- a/Cabal-syntax/src/Distribution/Compat/Prelude.hs
+++ b/Cabal-syntax/src/Distribution/Compat/Prelude.hs
@@ -22,7 +22,7 @@ module Distribution.Compat.Prelude
 
   --
   -- Prelude is re-exported, following is hidden:
-      module BasePrelude
+    module BasePrelude
 
     -- * Common type-classes
   , Semigroup (..)
diff --git a/Cabal-syntax/src/Distribution/PackageDescription.hs b/Cabal-syntax/src/Distribution/PackageDescription.hs
index 47d4667..ffd1713 100644
--- a/Cabal-syntax/src/Distribution/PackageDescription.hs
+++ b/Cabal-syntax/src/Distribution/PackageDescription.hs
@@ -12,7 +12,7 @@
 -- about @.cabal@ files.
 module Distribution.PackageDescription
   ( -- * PD and GPD
-      module Distribution.Types.PackageDescription
+    module Distribution.Types.PackageDescription
   , module Distribution.Types.GenericPackageDescription
 
     -- * Components
diff --git a/Cabal-syntax/src/Distribution/PackageDescription/Configuration.hs b/Cabal-syntax/src/Distribution/PackageDescription/Configuration.hs
index 9a9ba2d..f88eb22 100644
--- a/Cabal-syntax/src/Distribution/PackageDescription/Configuration.hs
+++ b/Cabal-syntax/src/Distribution/PackageDescription/Configuration.hs
@@ -117,12 +117,12 @@ parseCondition = condOr
     cond =
       sp
         >> ( boolLiteral
-              <|> inparens condOr
-              <|> notCond
-              <|> osCond
-              <|> archCond
-              <|> flagCond
-              <|> implCond
+               <|> inparens condOr
+               <|> notCond
+               <|> osCond
+               <|> archCond
+               <|> flagCond
+               <|> implCond
            )
     inparens = between (P.char '(' >> sp) (sp >> P.char ')' >> sp)
     notCond = P.char '!' >> sp >> cond >>= return . CNot
@@ -465,8 +465,8 @@ finalizePD
   -- ^ Additional constraints
   -> GenericPackageDescription
   -> Either
-      [Dependency]
-      (PackageDescription, FlagAssignment)
+       [Dependency]
+       (PackageDescription, FlagAssignment)
   -- ^ Either missing dependencies or the resolved package
   -- description along with the flag assignments chosen.
 finalizePD
diff --git a/Cabal-syntax/src/Distribution/PackageDescription/PrettyPrint.hs b/Cabal-syntax/src/Distribution/PackageDescription/PrettyPrint.hs
index b03b1b9..4039245 100644
--- a/Cabal-syntax/src/Distribution/PackageDescription/PrettyPrint.hs
+++ b/Cabal-syntax/src/Distribution/PackageDescription/PrettyPrint.hs
@@ -150,35 +150,35 @@ ppCondLibrary v (Just condTree) =
 ppCondSubLibraries :: CabalSpecVersion -> [(UnqualComponentName, CondTree ConfVar [Dependency] Library)] -> [PrettyField ()]
 ppCondSubLibraries v libs =
   [ PrettySection () "library" [pretty n] $
-    ppCondTree2 v (libraryFieldGrammar $ LSubLibName n) condTree
+      ppCondTree2 v (libraryFieldGrammar $ LSubLibName n) condTree
   | (n, condTree) <- libs
   ]
 
 ppCondForeignLibs :: CabalSpecVersion -> [(UnqualComponentName, CondTree ConfVar [Dependency] ForeignLib)] -> [PrettyField ()]
 ppCondForeignLibs v flibs =
   [ PrettySection () "foreign-library" [pretty n] $
-    ppCondTree2 v (foreignLibFieldGrammar n) condTree
+      ppCondTree2 v (foreignLibFieldGrammar n) condTree
   | (n, condTree) <- flibs
   ]
 
 ppCondExecutables :: CabalSpecVersion -> [(UnqualComponentName, CondTree ConfVar [Dependency] Executable)] -> [PrettyField ()]
 ppCondExecutables v exes =
   [ PrettySection () "executable" [pretty n] $
-    ppCondTree2 v (executableFieldGrammar n) condTree
+      ppCondTree2 v (executableFieldGrammar n) condTree
   | (n, condTree) <- exes
   ]
 
 ppCondTestSuites :: CabalSpecVersion -> [(UnqualComponentName, CondTree ConfVar [Dependency] TestSuite)] -> [PrettyField ()]
 ppCondTestSuites v suites =
   [ PrettySection () "test-suite" [pretty n] $
-    ppCondTree2 v testSuiteFieldGrammar (fmap FG.unvalidateTestSuite condTree)
+      ppCondTree2 v testSuiteFieldGrammar (fmap FG.unvalidateTestSuite condTree)
   | (n, condTree) <- suites
   ]
 
 ppCondBenchmarks :: CabalSpecVersion -> [(UnqualComponentName, CondTree ConfVar [Dependency] Benchmark)] -> [PrettyField ()]
 ppCondBenchmarks v suites =
   [ PrettySection () "benchmark" [pretty n] $
-    ppCondTree2 v benchmarkFieldGrammar (fmap FG.unvalidateBenchmark condTree)
+      ppCondTree2 v benchmarkFieldGrammar (fmap FG.unvalidateBenchmark condTree)
   | (n, condTree) <- suites
   ]
 
@@ -308,6 +308,6 @@ showHookedBuildInfo (mb_lib_bi, ex_bis) =
   showFields (const NoComment) $
     maybe mempty (prettyFieldGrammar cabalSpecLatest buildInfoFieldGrammar) mb_lib_bi
       ++ [ PrettySection () "executable:" [pretty name] $
-          prettyFieldGrammar cabalSpecLatest buildInfoFieldGrammar bi
+             prettyFieldGrammar cabalSpecLatest buildInfoFieldGrammar bi
          | (name, bi) <- ex_bis
          ]
diff --git a/Cabal/src/Distribution/Backpack/ComponentsGraph.hs b/Cabal/src/Distribution/Backpack/ComponentsGraph.hs
index aef3db8..5f0b7bc 100644
--- a/Cabal/src/Distribution/Backpack/ComponentsGraph.hs
+++ b/Cabal/src/Distribution/Backpack/ComponentsGraph.hs
@@ -41,9 +41,9 @@ dispComponentsWithDeps :: ComponentsWithDeps -> Doc
 dispComponentsWithDeps graph =
   vcat
     [ hang
-      (text "component" <+> pretty (componentName c))
-      4
-      (vcat [text "dependency" <+> pretty cdep | cdep <- cdeps])
+        (text "component" <+> pretty (componentName c))
+        4
+        (vcat [text "dependency" <+> pretty cdep | cdep <- cdeps])
     | (c, cdeps) <- graph
     ]
 
diff --git a/Cabal/src/Distribution/Backpack/Configure.hs b/Cabal/src/Distribution/Backpack/Configure.hs
index 8e9eb18..eee2f59 100644
--- a/Cabal/src/Distribution/Backpack/Configure.hs
+++ b/Cabal/src/Distribution/Backpack/Configure.hs
@@ -184,10 +184,10 @@ configureComponentLocalBuildInfos
               ++ [ (Installed.installedUnitId pkg, mungedId pkg)
                  | (_, Module uid _) <- instantiate_with
                  , Just pkg <-
-                    [ PackageIndex.lookupUnitId
-                        installedPackageSet
-                        (unDefUnitId uid)
-                    ]
+                     [ PackageIndex.lookupUnitId
+                         installedPackageSet
+                         (unDefUnitId uid)
+                     ]
                  ]
         subst = Map.fromList instantiate_with
         graph3 = toReadyComponents pid_map subst graph2
@@ -213,9 +213,9 @@ toComponentLocalBuildInfos
   -> [PreExistingComponent] -- external package deps
   -> [ReadyComponent]
   -> LogProgress
-      ( [ComponentLocalBuildInfo]
-      , InstalledPackageIndex -- only relevant packages
-      )
+       ( [ComponentLocalBuildInfo]
+       , InstalledPackageIndex -- only relevant packages
+       )
 toComponentLocalBuildInfos
   comp
   installedPackageSet
@@ -278,16 +278,16 @@ toComponentLocalBuildInfos
                 -- TODO: Undupe.
                 ++ unlines
                   [ "installed package "
-                    ++ prettyShow (packageId pkg)
-                    ++ " is broken due to missing package "
-                    ++ intercalate ", " (map prettyShow deps)
+                      ++ prettyShow (packageId pkg)
+                      ++ " is broken due to missing package "
+                      ++ intercalate ", " (map prettyShow deps)
                   | (Left pkg, deps) <- broken
                   ]
                 ++ unlines
                   [ "planned package "
-                    ++ prettyShow (packageId pkg)
-                    ++ " is broken due to missing package "
-                    ++ intercalate ", " (map prettyShow deps)
+                      ++ prettyShow (packageId pkg)
+                      ++ " is broken due to missing package "
+                      ++ intercalate ", " (map prettyShow deps)
                   | (Right pkg, deps) <- broken
                   ]
 
@@ -325,10 +325,10 @@ toComponentLocalBuildInfos
             2
             ( vcat
                 [ text "package"
-                  <+> pretty (packageName user)
-                  <+> parens (pretty (installedUnitId user))
-                  <+> text "requires"
-                  <+> pretty inst
+                    <+> pretty (packageName user)
+                    <+> parens (pretty (installedUnitId user))
+                    <+> text "requires"
+                    <+> pretty inst
                 | (_dep_key, insts) <- inconsistencies
                 , (inst, users) <- insts
                 , user <- users
diff --git a/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs b/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
index 9bfaefb..9d1ed67 100644
--- a/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
+++ b/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
@@ -86,10 +86,10 @@ dispConfiguredComponent cc =
     4
     ( vcat
         [ hsep $
-          [ text "include"
-          , pretty (ci_id incl)
-          , pretty (ci_renaming incl)
-          ]
+            [ text "include"
+            , pretty (ci_id incl)
+            , pretty (ci_renaming incl)
+            ]
         | incl <- cc_includes cc
         ]
     )
diff --git a/Cabal/src/Distribution/Backpack/Id.hs b/Cabal/src/Distribution/Backpack/Id.hs
index 38e831a..0a10362 100644
--- a/Cabal/src/Distribution/Backpack/Id.hs
+++ b/Cabal/src/Distribution/Backpack/Id.hs
@@ -78,8 +78,8 @@ computeComponentId deterministic mb_ipid mb_cid pid cname mb_details =
           mkComponentId $
             actual_base
               ++ ( case componentNameString cname of
-                    Nothing -> ""
-                    Just s -> "-" ++ unUnqualComponentName s
+                     Nothing -> ""
+                     Just s -> "-" ++ unUnqualComponentName s
                  )
 
 -- | In GHC 8.0, the string we pass to GHC to use for symbol
diff --git a/Cabal/src/Distribution/Backpack/MixLink.hs b/Cabal/src/Distribution/Backpack/MixLink.hs
index b358612..3e4cc8d 100644
--- a/Cabal/src/Distribution/Backpack/MixLink.hs
+++ b/Cabal/src/Distribution/Backpack/MixLink.hs
@@ -61,11 +61,11 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
           text "Ambiguous module"
             <+> quotes (pretty mod_name)
             $$ text "It could refer to"
-            <+> ( text "  "
-                    <+> (quotes (pretty mod) $$ in_scope_by (getSource prov))
-                    $$ text "or"
-                    <+> (quotes (pretty mod') $$ in_scope_by (getSource prov'))
-                )
+              <+> ( text "  "
+                      <+> (quotes (pretty mod) $$ in_scope_by (getSource prov))
+                      $$ text "or"
+                        <+> (quotes (pretty mod') $$ in_scope_by (getSource prov'))
+                  )
             $$ link_doc
   mod <- convertModuleU (unWithSource prov)
   req_mod <- convertModuleU (unWithSource req)
@@ -78,7 +78,7 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
               <+> quotes (pretty mod_name)
               <+> in_scope_by (getSource req)
               $$ text "with locally defined module"
-              <+> in_scope_by (getSource prov)
+                <+> in_scope_by (getSource prov)
               $$ text "as this would create a cyclic dependency, which GHC does not support."
               $$ text "Try moving this module to a separate library, e.g.,"
               $$ text "create a new stanza: library 'sublib'."
@@ -96,7 +96,7 @@ linkProvision mod_name ret@(prov : provs) (req : reqs) = do
             ( text "Expected:"
                 <+> pretty mod
                 $$ text "Actual:  "
-                <+> pretty req_mod
+                  <+> pretty req_mod
             )
           $$ parens
             ( text "This can occur if an exposed module of"
@@ -144,7 +144,7 @@ unifyUnitId uid1_u uid2_u
                   ( text "   "
                       <+> pretty u1
                       $$ text "and"
-                      <+> pretty u2
+                        <+> pretty u2
                   )
         (UnitIdThunkU uid1, UnitIdU _ cid2 insts2) ->
           unifyThunkWith cid2 insts2 uid2_u uid1 uid1_u
@@ -185,7 +185,7 @@ unifyInner cid1 insts1 uid1_u cid2 insts2 uid2_u = do
         ( text "   "
             <+> pretty cid1
             $$ text "and"
-            <+> pretty cid2
+              <+> pretty cid2
         )
   -- The KEY STEP which makes this a Huet-style unification
   -- algorithm.  (Also a payoff of using union-find.)
@@ -213,7 +213,7 @@ unifyModule mod1_u mod2_u
                 text "   "
                   <+> pretty mod_name1
                   $$ text "and"
-                  <+> pretty mod_name2
+                    <+> pretty mod_name2
           -- NB: this is not actually necessary (because we'll
           -- detect loops eventually in 'unifyUnitId'), but it
           -- seems harmless enough
diff --git a/Cabal/src/Distribution/Backpack/UnifyM.hs b/Cabal/src/Distribution/Backpack/UnifyM.hs
index 6e0f00d..a266635 100644
--- a/Cabal/src/Distribution/Backpack/UnifyM.hs
+++ b/Cabal/src/Distribution/Backpack/UnifyM.hs
@@ -422,7 +422,7 @@ failWithMutuallyRecursiveUnitsError required_mod_name mod_names =
         text "Cannot instantiate requirement"
           <+> quotes required_mod_name
           $$ text "Ensure \"build-depends:\" doesn't include any library with signatures:"
-          <+> sigsList
+            <+> sigsList
           $$ text "as this creates a cyclic dependency, which GHC does not support."
 
 -- Helper functions
@@ -465,24 +465,24 @@ ci_msg ci
 convertInclude
   :: ComponentInclude (OpenUnitId, ModuleShape) IncludeRenaming
   -> UnifyM
-      s
-      ( ModuleScopeU s
-      , Either
-          (ComponentInclude (UnitIdU s) ModuleRenaming {- normal -})
-          (ComponentInclude (UnitIdU s) ModuleRenaming {- sig -})
-      )
+       s
+       ( ModuleScopeU s
+       , Either
+           (ComponentInclude (UnitIdU s) ModuleRenaming {- normal -})
+           (ComponentInclude (UnitIdU s) ModuleRenaming {- sig -})
+       )
 convertInclude
   ci@( ComponentInclude
-        { ci_ann_id =
-          AnnotatedId
-            { ann_id = (uid, ModuleShape provs reqs)
-            , ann_pid = pid
-            , ann_cname = compname
-            }
-        , ci_renaming = incl@(IncludeRenaming prov_rns req_rns)
-        , ci_implicit = implicit
-        }
-      ) = addErrContext (text "In" <+> ci_msg ci) $ do
+         { ci_ann_id =
+           AnnotatedId
+             { ann_id = (uid, ModuleShape provs reqs)
+             , ann_pid = pid
+             , ann_cname = compname
+             }
+         , ci_renaming = incl@(IncludeRenaming prov_rns req_rns)
+         , ci_implicit = implicit
+         }
+       ) = addErrContext (text "In" <+> ci_msg ci) $ do
     let pn = packageName pid
         the_source
           | implicit =
@@ -532,7 +532,7 @@ convertInclude
             text "Conflicting renamings of requirement"
               <+> quotes (pretty k)
               $$ text "Renamed to: "
-              <+> vcat (map pretty (v : vs))
+                <+> vcat (map pretty (v : vs))
           return v
 
     let req_rename_fn k = case Map.lookup k req_rename of
@@ -609,13 +609,13 @@ convertInclude
           r <-
             sequence
               [ case Map.lookup from provs of
-                Just m -> return (to, m)
-                Nothing ->
-                  failWith $
-                    text "Package"
-                      <+> quotes (pretty pid)
-                      <+> text "does not expose the module"
-                      <+> quotes (pretty from)
+                  Just m -> return (to, m)
+                  Nothing ->
+                    failWith $
+                      text "Package"
+                        <+> quotes (pretty pid)
+                        <+> text "does not expose the module"
+                        <+> quotes (pretty from)
               | (from, to) <- rns
               ]
           return (r, prov_rns)
diff --git a/Cabal/src/Distribution/PackageDescription/Check/Conditional.hs b/Cabal/src/Distribution/PackageDescription/Check/Conditional.hs
index da05b2c..7a22e13 100644
--- a/Cabal/src/Distribution/PackageDescription/Check/Conditional.hs
+++ b/Cabal/src/Distribution/PackageDescription/Check/Conditional.hs
@@ -73,9 +73,9 @@ annotateCondTree fs ta (CondNode a c bs) =
       :: TargetAnnotation a
       -> CondBranch ConfVar [Dependency] a
       -> CondBranch
-          ConfVar
-          [Dependency]
-          (TargetAnnotation a)
+           ConfVar
+           [Dependency]
+           (TargetAnnotation a)
     annotateBranch wta (CondBranch k t mf) =
       let uf = isPkgFlagCond k
           wta' = wta{taPackageFlag = taPackageFlag wta || uf}
diff --git a/Cabal/src/Distribution/PackageDescription/Check/Target.hs b/Cabal/src/Distribution/PackageDescription/Check/Target.hs
index e6cfba7..a2203de 100644
--- a/Cabal/src/Distribution/PackageDescription/Check/Target.hs
+++ b/Cabal/src/Distribution/PackageDescription/Check/Target.hs
@@ -188,11 +188,11 @@ checkTestSuite
 checkTestSuite
   ads
   ts@( TestSuite
-        testName_
-        testInterface_
-        testBuildInfo_
-        _testCodeGenerators_
-      ) = do
+         testName_
+         testInterface_
+         testBuildInfo_
+         _testCodeGenerators_
+       ) = do
     -- Target type/name (test).
     let cet = CETTest testName_
 
@@ -249,10 +249,10 @@ checkBenchmark
 checkBenchmark
   ads
   bm@( Benchmark
-        benchmarkName_
-        benchmarkInterface_
-        benchmarkBuildInfo_
-      ) = do
+         benchmarkName_
+         benchmarkInterface_
+         benchmarkBuildInfo_
+       ) = do
     -- Target type/name (benchmark).
     let cet = CETBenchmark benchmarkName_
 
diff --git a/Cabal/src/Distribution/PackageDescription/Check/Warning.hs b/Cabal/src/Distribution/PackageDescription/Check/Warning.hs
index f7a048f..86a7afb 100644
--- a/Cabal/src/Distribution/PackageDescription/Check/Warning.hs
+++ b/Cabal/src/Distribution/PackageDescription/Check/Warning.hs
@@ -883,10 +883,10 @@ ppExplanation (DeprecatedExtensions ourDeprecatedExtensions) =
     ++ ". "
     ++ unwords
       [ "Instead of '"
-        ++ prettyShow ext
-        ++ "' use '"
-        ++ prettyShow replacement
-        ++ "'."
+          ++ prettyShow ext
+          ++ "' use '"
+          ++ prettyShow replacement
+          ++ "'."
       | (ext, Just replacement) <- ourDeprecatedExtensions
       ]
 ppExplanation MissingFieldCategory = "No 'category' field."
diff --git a/Cabal/src/Distribution/Simple/Bench.hs b/Cabal/src/Distribution/Simple/Bench.hs
index 86b6e06..b65e146 100644
--- a/Cabal/src/Distribution/Simple/Bench.hs
+++ b/Cabal/src/Distribution/Simple/Bench.hs
@@ -119,8 +119,8 @@ bench args pkg_descr lbi flags = do
         ++ name
         ++ ": "
         ++ ( case exitcode of
-              ExitSuccess -> "FINISH"
-              ExitFailure _ -> "ERROR"
+               ExitSuccess -> "FINISH"
+               ExitFailure _ -> "ERROR"
            )
 
 -- TODO: This is abusing the notion of a 'PathTemplate'.  The result isn't
diff --git a/Cabal/src/Distribution/Simple/Build.hs b/Cabal/src/Distribution/Simple/Build.hs
index bc6ac7a..cee2d1c 100644
--- a/Cabal/src/Distribution/Simple/Build.hs
+++ b/Cabal/src/Distribution/Simple/Build.hs
@@ -309,19 +309,19 @@ repl pkg_descr lbi flags suffixes args = do
   -- build any dependent components
   sequence_
     [ do
-      let clbi = targetCLBI subtarget
-          comp = targetComponent subtarget
-          lbi' = lbiForComponent comp lbi
-      preBuildComponent verbosity lbi subtarget
-      buildComponent
-        mempty{buildVerbosity = toFlag verbosity}
-        NoFlag
-        pkg_descr
-        lbi'
-        suffixes
-        comp
-        clbi
-        distPref
+        let clbi = targetCLBI subtarget
+            comp = targetComponent subtarget
+            lbi' = lbiForComponent comp lbi
+        preBuildComponent verbosity lbi subtarget
+        buildComponent
+          mempty{buildVerbosity = toFlag verbosity}
+          NoFlag
+          pkg_descr
+          lbi'
+          suffixes
+          comp
+          clbi
+          distPref
     | subtarget <- safeInit componentsToBuild
     ]
 
@@ -367,8 +367,8 @@ buildComponent
   lbi0
   suffixes
   comp@( CTest
-          test@TestSuite{testInterface = TestSuiteLibV09{}}
-        )
+           test@TestSuite{testInterface = TestSuiteLibV09{}}
+         )
   clbi -- This ComponentLocalBuildInfo corresponds to a detailed
   -- test suite and not a real component. It should not
   -- be used, except to construct the CLBIs for the
@@ -534,7 +534,7 @@ generateCode codeGens nm pdesc bi lbi clbi verbosity = do
           (withPrograms lbi)
           ( (tgtDir : map getSymbolicPath srcDirs)
               ++ ( "--"
-                    : GHC.renderGhcOptions (compiler lbi) (hostPlatform lbi) (GHC.componentGhcOptions verbosity lbi bi clbi tgtDir)
+                     : GHC.renderGhcOptions (compiler lbi) (hostPlatform lbi) (GHC.componentGhcOptions verbosity lbi bi clbi tgtDir)
                  )
           )
 
@@ -607,8 +607,8 @@ replComponent
   lbi0
   suffixes
   comp@( CTest
-          test@TestSuite{testInterface = TestSuiteLibV09{}}
-        )
+           test@TestSuite{testInterface = TestSuiteLibV09{}}
+         )
   clbi
   distPref = do
     pwd <- getCurrentDirectory
diff --git a/Cabal/src/Distribution/Simple/Build/Macros.hs b/Cabal/src/Distribution/Simple/Build/Macros.hs
index 3dbce86..ebee0d9 100644
--- a/Cabal/src/Distribution/Simple/Build/Macros.hs
+++ b/Cabal/src/Distribution/Simple/Build/Macros.hs
@@ -47,12 +47,12 @@ generateCabalMacrosHeader pkg_descr lbi clbi =
       { Z.zPackages = map mkZPackage $ package pkg_descr : map getPid (componentPackageDeps clbi)
       , Z.zTools =
           [ Z.ZTool
-            { Z.ztoolName = programId prog
-            , Z.ztoolVersion = ver
-            , Z.ztoolX = major1
-            , Z.ztoolY = major2
-            , Z.ztoolZ = minor
-            }
+              { Z.ztoolName = programId prog
+              , Z.ztoolVersion = ver
+              , Z.ztoolX = major1
+              , Z.ztoolY = major2
+              , Z.ztoolZ = minor
+              }
           | prog <- configuredPrograms $ withPrograms lbi
           , ver <- maybeToList (programVersion prog)
           , let (major1, major2, minor) = majorMinor ver
diff --git a/Cabal/src/Distribution/Simple/BuildTarget.hs b/Cabal/src/Distribution/Simple/BuildTarget.hs
index 06b387c..c246f68 100644
--- a/Cabal/src/Distribution/Simple/BuildTarget.hs
+++ b/Cabal/src/Distribution/Simple/BuildTarget.hs
@@ -210,8 +210,8 @@ readUserBuildTargets = partitionEithers . map readUserBuildTarget
 readUserBuildTarget
   :: String
   -> Either
-      UserBuildTargetProblem
-      UserBuildTarget
+       UserBuildTargetProblem
+       UserBuildTarget
 readUserBuildTarget targetstr =
   case explicitEitherParsec parseTargetApprox targetstr of
     Left _ -> Left (UserBuildTargetUnrecognised targetstr)
@@ -492,17 +492,17 @@ type ComponentStringName = String
 pkgComponentInfo :: PackageDescription -> [ComponentInfo]
 pkgComponentInfo pkg =
   [ ComponentInfo
-    { cinfoName = componentName c
-    , cinfoStrName = componentStringName pkg (componentName c)
-    , cinfoSrcDirs = map getSymbolicPath $ hsSourceDirs bi
-    , cinfoModules = componentModules c
-    , cinfoHsFiles = componentHsFiles c
-    , cinfoAsmFiles = asmSources bi
-    , cinfoCmmFiles = cmmSources bi
-    , cinfoCFiles = cSources bi
-    , cinfoCxxFiles = cxxSources bi
-    , cinfoJsFiles = jsSources bi
-    }
+      { cinfoName = componentName c
+      , cinfoStrName = componentStringName pkg (componentName c)
+      , cinfoSrcDirs = map getSymbolicPath $ hsSourceDirs bi
+      , cinfoModules = componentModules c
+      , cinfoHsFiles = componentHsFiles c
+      , cinfoAsmFiles = asmSources bi
+      , cinfoCmmFiles = cmmSources bi
+      , cinfoCFiles = cSources bi
+      , cinfoCxxFiles = cxxSources bi
+      , cinfoJsFiles = jsSources bi
+      }
   | c <- pkgComponents pkg
   , let bi = componentBuildInfo c
   ]
@@ -1051,8 +1051,8 @@ checkBuildTargets
     let (enabled, disabled) =
           partitionEithers
             [ case componentDisabledReason enabledComps comp of
-              Nothing -> Left target'
-              Just reason -> Right (cname, reason)
+                Nothing -> Left target'
+                Just reason -> Right (cname, reason)
             | target <- targets
             , let target'@(cname, _) = swizzleTarget target
             , let comp = getComponent pkg_descr cname
diff --git a/Cabal/src/Distribution/Simple/Command.hs b/Cabal/src/Distribution/Simple/Command.hs
index 2da6486..244e2ae 100644
--- a/Cabal/src/Distribution/Simple/Command.hs
+++ b/Cabal/src/Distribution/Simple/Command.hs
@@ -424,8 +424,8 @@ commandShowOptions command v =
       ]
     showOptDescr x (OptArg _ (_ssff, lf : _) _ _ _ showflag) =
       [ case flag of
-        Just s -> "--" ++ lf ++ "=" ++ s
-        Nothing -> "--" ++ lf
+          Just s -> "--" ++ lf ++ "=" ++ s
+          Nothing -> "--" ++ lf
       | flag <- showflag x
       ]
     showOptDescr _ _ =
@@ -450,21 +450,21 @@ commandHelp command pname =
     ++ "\n\n"
     ++ commandUsage command pname
     ++ ( case commandDescription command of
-          Nothing -> ""
-          Just desc -> '\n' : desc pname
+           Nothing -> ""
+           Just desc -> '\n' : desc pname
        )
     ++ "\n"
     ++ ( if cname == ""
-          then "Global flags:"
-          else "Flags for " ++ cname ++ ":"
+           then "Global flags:"
+           else "Flags for " ++ cname ++ ":"
        )
     ++ ( GetOpt.usageInfo ""
-          . addCommonFlags ShowArgs
-          $ commandGetOpts ShowArgs command
+           . addCommonFlags ShowArgs
+           $ commandGetOpts ShowArgs command
        )
     ++ ( case commandNotes command of
-          Nothing -> ""
-          Just notes -> '\n' : notes pname
+           Nothing -> ""
+           Just notes -> '\n' : notes pname
        )
   where
     cname = commandName command
@@ -579,12 +579,12 @@ commandParseArgs command global args =
     accum flags = foldr (flip (.)) id [f | Right f <- flags]
     unrecognised opts =
       [ "unrecognized "
-        ++ "'"
-        ++ (commandName command)
-        ++ "'"
-        ++ " option `"
-        ++ opt
-        ++ "'\n"
+          ++ "'"
+          ++ (commandName command)
+          ++ "'"
+          ++ " option `"
+          ++ opt
+          ++ "'\n"
       | opt <- opts
       ]
     -- For unrecognised global flags we put them in the position just after
diff --git a/Cabal/src/Distribution/Simple/Compiler.hs b/Cabal/src/Distribution/Simple/Compiler.hs
index 6aaa093..dca2efe 100644
--- a/Cabal/src/Distribution/Simple/Compiler.hs
+++ b/Cabal/src/Distribution/Simple/Compiler.hs
@@ -23,7 +23,7 @@
 -- not yet fully support this latter feature.
 module Distribution.Simple.Compiler
   ( -- * Haskell implementations
-      module Distribution.Compiler
+    module Distribution.Compiler
   , Compiler (..)
   , showCompilerId
   , showCompilerIdWithAbi
diff --git a/Cabal/src/Distribution/Simple/Configure.hs b/Cabal/src/Distribution/Simple/Configure.hs
index d6bffdd..0760348 100644
--- a/Cabal/src/Distribution/Simple/Configure.hs
+++ b/Cabal/src/Distribution/Simple/Configure.hs
@@ -1076,12 +1076,12 @@ configureComponents
 configureComponents
   lbc@(LBC.LocalBuildConfig{withPrograms = programDb})
   pbd0@( LBC.PackageBuildDescr
-          { configFlags = cfg
-          , localPkgDescr = pkg_descr
-          , compiler = comp
-          , componentEnabledSpec = enabled
-          }
-        )
+           { configFlags = cfg
+           , localPkgDescr = pkg_descr
+           , compiler = comp
+           , componentEnabledSpec = enabled
+           }
+         )
   (PackageInfo{promisedDepsSet, installedPackageSet})
   externalPkgDeps =
     do
@@ -1360,7 +1360,6 @@ dependencySatisfiable
           -- those are just True.
             internalDepSatisfiable
           else -- Backward compatibility for the old sublibrary syntax
-
             ( sublibs == mainLibSet
                 && Map.member
                   ( pn
@@ -1837,9 +1836,9 @@ reportSelectedDependencies verbosity deps =
   info verbosity $
     unlines
       [ "Dependency "
-        ++ prettyShow (simplifyDependency dep)
-        ++ ": using "
-        ++ prettyShow pkgid
+          ++ prettyShow (simplifyDependency dep)
+          ++ ": using "
+          ++ prettyShow pkgid
       | (dep, resolution) <- deps
       , let pkgid = case resolution of
               ExternalDependency pkg' -> packageId pkg'
@@ -1989,10 +1988,10 @@ combinedConstraints
   -- ^ installed dependencies
   -> InstalledPackageIndex
   -> Either
-      CabalException
-      ( [PackageVersionConstraint]
-      , Map (PackageName, ComponentName) InstalledPackageInfo
-      )
+       CabalException
+       ( [PackageVersionConstraint]
+       , Map (PackageName, ComponentName) InstalledPackageInfo
+       )
 combinedConstraints constraints dependencies installedPackages = do
   when (not (null badComponentIds)) $
     Left $
@@ -2040,15 +2039,15 @@ combinedConstraints constraints dependencies installedPackages = do
     dispDependencies deps =
       hsep
         [ text "--dependency="
-          <<>> quotes
-            ( pretty pkgname
-                <<>> case cname of
-                  CLibName LMainLibName -> ""
-                  CLibName (LSubLibName n) -> ":" <<>> pretty n
-                  _ -> ":" <<>> pretty cname
-                <<>> char '='
-                <<>> pretty cid
-            )
+            <<>> quotes
+              ( pretty pkgname
+                  <<>> case cname of
+                    CLibName LMainLibName -> ""
+                    CLibName (LSubLibName n) -> ":" <<>> pretty n
+                    _ -> ":" <<>> pretty cname
+                  <<>> char '='
+                  <<>> pretty cid
+              )
         | (pkgname, cname, cid) <- deps
         ]
 
@@ -2406,13 +2405,13 @@ checkForeignDeps pkg lbi verbosity =
         ++ collectField ccOptions
         ++ [ "-I" ++ dir
            | dir <-
-              ordNub
-                [ dir
-                | dep <- deps
-                , dir <- IPI.includeDirs dep
-                ]
-                -- dedupe include dirs of dependencies
-                -- to prevent quadratic blow-up
+               ordNub
+                 [ dir
+                 | dep <- deps
+                 , dir <- IPI.includeDirs dep
+                 ]
+                 -- dedupe include dirs of dependencies
+                 -- to prevent quadratic blow-up
            ]
         ++ [ opt
            | dep <- deps
@@ -2440,14 +2439,14 @@ checkForeignDeps pkg lbi verbosity =
         ++ collectField ldOptions
         ++ [ "-L" ++ dir
            | dir <-
-              ordNub
-                [ dir
-                | dep <- deps
-                , dir <-
-                    if withFullyStaticExe lbi
-                      then IPI.libraryDirsStatic dep
-                      else IPI.libraryDirs dep
-                ]
+               ordNub
+                 [ dir
+                 | dep <- deps
+                 , dir <-
+                     if withFullyStaticExe lbi
+                       then IPI.libraryDirsStatic dep
+                       else IPI.libraryDirs dep
+                 ]
            ]
     -- TODO: do we also need dependent packages' ld options?
     makeLdArgs libs = ["-l" ++ lib | lib <- libs] ++ commonLdArgs
diff --git a/Cabal/src/Distribution/Simple/Errors.hs b/Cabal/src/Distribution/Simple/Errors.hs
index 2c5af36..d119126 100644
--- a/Cabal/src/Distribution/Simple/Errors.hs
+++ b/Cabal/src/Distribution/Simple/Errors.hs
@@ -420,26 +420,26 @@ exceptionMessage e = case e of
   ReportBuildTargetProblems targets ->
     unlines
       [ "Unrecognised build target '"
-        ++ target
-        ++ "'.\n"
-        ++ "Expected a "
-        ++ intercalate " or " expected
-        ++ ", rather than '"
-        ++ got
-        ++ "'."
+          ++ target
+          ++ "'.\n"
+          ++ "Expected a "
+          ++ intercalate " or " expected
+          ++ ", rather than '"
+          ++ got
+          ++ "'."
       | (target, expected, got) <- targets
       ]
   UnknownBuildTarget targets ->
     unlines
       [ "Unknown build target '"
-        ++ target
-        ++ "'.\nThere is no "
-        ++ intercalate
-          " or "
-          [ mungeThing thing ++ " '" ++ got ++ "'"
-          | (thing, got) <- nosuch
-          ]
-        ++ "."
+          ++ target
+          ++ "'.\nThere is no "
+          ++ intercalate
+            " or "
+            [ mungeThing thing ++ " '" ++ got ++ "'"
+            | (thing, got) <- nosuch
+            ]
+          ++ "."
       | (target, nosuch) <- targets
       ]
     where
@@ -448,16 +448,16 @@ exceptionMessage e = case e of
   AmbiguousBuildTarget targets ->
     unlines
       [ "Ambiguous build target '"
-        ++ target
-        ++ "'. It could be:\n "
-        ++ unlines
-          [ "   "
-            ++ ut
-            ++ " ("
-            ++ bt
-            ++ ")"
-          | (ut, bt) <- amb
-          ]
+          ++ target
+          ++ "'. It could be:\n "
+          ++ unlines
+            [ "   "
+                ++ ut
+                ++ " ("
+                ++ bt
+                ++ ")"
+            | (ut, bt) <- amb
+            ]
       | (target, amb) <- targets
       ]
   CheckBuildTargets errorStr -> errorStr
@@ -549,11 +549,11 @@ exceptionMessage e = case e of
   EncounteredMissingDependency missing ->
     "Encountered missing or private dependencies:\n"
       ++ ( render
-            . nest 4
-            . sep
-            . punctuate comma
-            . map (pretty . simplifyDependency)
-            $ missing
+             . nest 4
+             . sep
+             . punctuate comma
+             . map (pretty . simplifyDependency)
+             $ missing
          )
   CompilerDoesn'tSupportThinning ->
     "Your compiler does not support thinning and renaming on "
@@ -633,8 +633,8 @@ exceptionMessage e = case e of
   ExplainErrors hdr libs ->
     unlines $
       [ if plural
-        then "Missing dependencies on foreign libraries:"
-        else "Missing dependency on a foreign library:"
+          then "Missing dependencies on foreign libraries:"
+          else "Missing dependency on a foreign library:"
       | missing
       ]
         ++ case hdr of
diff --git a/Cabal/src/Distribution/Simple/GHC.hs b/Cabal/src/Distribution/Simple/GHC.hs
index 614de75..41112bf 100644
--- a/Cabal/src/Distribution/Simple/GHC.hs
+++ b/Cabal/src/Distribution/Simple/GHC.hs
@@ -531,8 +531,8 @@ getInstalledPackages'
 getInstalledPackages' verbosity packagedbs progdb =
   sequenceA
     [ do
-      pkgs <- HcPkg.dump (hcPkgInfo progdb) verbosity packagedb
-      return (packagedb, pkgs)
+        pkgs <- HcPkg.dump (hcPkgInfo progdb) verbosity packagedb
+        return (packagedb, pkgs)
     | packagedb <- packagedbs
     ]
 
@@ -839,9 +839,9 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
     whenVanilla $ do
       sequence_
         [ installOrdinary
-          builtDir
-          targetDir
-          (mkGenericStaticLibName (l ++ f))
+            builtDir
+            targetDir
+            (mkGenericStaticLibName (l ++ f))
         | l <-
             getHSLibraryName
               (componentUnitId clbi)
@@ -854,20 +854,20 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
       whenGHCi $ installOrdinary builtDir targetDir ghciProfLibName
     whenShared $
       if
-          -- The behavior for "extra-bundled-libraries" changed in version 2.5.0.
-          -- See ghc issue #15837 and Cabal PR #5855.
-          | specVersion pkg < CabalSpecV3_0 -> do
-              sequence_
-                [ installShared
+        -- The behavior for "extra-bundled-libraries" changed in version 2.5.0.
+        -- See ghc issue #15837 and Cabal PR #5855.
+        | specVersion pkg < CabalSpecV3_0 -> do
+            sequence_
+              [ installShared
                   builtDir
                   dynlibTargetDir
                   (mkGenericSharedLibName platform compiler_id (l ++ f))
-                | l <- getHSLibraryName uid : extraBundledLibs (libBuildInfo lib)
-                , f <- "" : extraDynLibFlavours (libBuildInfo lib)
-                ]
-          | otherwise -> do
-              sequence_
-                [ installShared
+              | l <- getHSLibraryName uid : extraBundledLibs (libBuildInfo lib)
+              , f <- "" : extraDynLibFlavours (libBuildInfo lib)
+              ]
+        | otherwise -> do
+            sequence_
+              [ installShared
                   builtDir
                   dynlibTargetDir
                   ( mkGenericSharedLibName
@@ -875,10 +875,10 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
                       compiler_id
                       (getHSLibraryName uid ++ f)
                   )
-                | f <- "" : extraDynLibFlavours (libBuildInfo lib)
-                ]
-              sequence_
-                [ do
+              | f <- "" : extraDynLibFlavours (libBuildInfo lib)
+              ]
+            sequence_
+              [ do
                   files <- getDirectoryContents builtDir
                   let l' =
                         mkGenericSharedBundledLibName
@@ -893,8 +893,8 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
                           builtDir
                           dynlibTargetDir
                           file
-                | l <- extraBundledLibs (libBuildInfo lib)
-                ]
+              | l <- extraBundledLibs (libBuildInfo lib)
+              ]
   where
     builtDir = componentBuildDir lbi clbi
 
diff --git a/Cabal/src/Distribution/Simple/GHC/Build/Link.hs b/Cabal/src/Distribution/Simple/GHC/Build/Link.hs
index f25c60c..f80f2f4 100644
--- a/Cabal/src/Distribution/Simple/GHC/Build/Link.hs
+++ b/Cabal/src/Distribution/Simple/GHC/Build/Link.hs
@@ -239,9 +239,9 @@ linkLibrary buildTargetDir cleanedExtraLibDirs pkg_descr verbosity runGhcProg li
         , catMaybes
             <$> sequenceA
               [ findFileWithExtension
-                [Suffix $ buildWayPrefix way ++ objExtension]
-                [buildTargetDir]
-                (ModuleName.toFilePath x ++ "_stub")
+                  [Suffix $ buildWayPrefix way ++ objExtension]
+                  [buildTargetDir]
+                  (ModuleName.toFilePath x ++ "_stub")
               | ghcVersion < mkVersion [7, 2] -- ghc-7.2+ does not make _stub.o files
               , x <- allLibModules lib clbi
               ]
diff --git a/Cabal/src/Distribution/Simple/GHC/Internal.hs b/Cabal/src/Distribution/Simple/GHC/Internal.hs
index 43e329f..9dc07af 100644
--- a/Cabal/src/Distribution/Simple/GHC/Internal.hs
+++ b/Cabal/src/Distribution/Simple/GHC/Internal.hs
@@ -312,7 +312,6 @@ getExtensions verbosity implInfo ghcProg = do
           then lines str
           else -- Older GHCs only gave us either Foo or NoFoo,
           -- so we have to work out the other one ourselves
-
             [ extStr''
             | extStr <- lines str
             , let extStr' = case extStr of
@@ -332,7 +331,6 @@ getExtensions verbosity implInfo ghcProg = do
           -- Since it was not a proper extension, it could
           -- not be turned off, hence we omit a
           -- DisableExtension entry here.
-
             (EnableExtension NondecreasingIndentation, Nothing)
               : extensions0
           else extensions0
@@ -373,10 +371,10 @@ componentCcGhcOptions verbosity lbi bi clbi odir filename =
             _ -> ["-O2"]
         )
           ++ ( case withDebugInfo lbi of
-                NoDebugInfo -> []
-                MinimalDebugInfo -> ["-g1"]
-                NormalDebugInfo -> ["-g"]
-                MaximalDebugInfo -> ["-g3"]
+                 NoDebugInfo -> []
+                 MinimalDebugInfo -> ["-g1"]
+                 NormalDebugInfo -> ["-g"]
+                 MaximalDebugInfo -> ["-g3"]
              )
           ++ ccOptions bi
     , ghcOptCcProgram =
@@ -422,10 +420,10 @@ componentCxxGhcOptions verbosity lbi bi clbi odir filename =
             _ -> ["-O2"]
         )
           ++ ( case withDebugInfo lbi of
-                NoDebugInfo -> []
-                MinimalDebugInfo -> ["-g1"]
-                NormalDebugInfo -> ["-g"]
-                MaximalDebugInfo -> ["-g3"]
+                 NoDebugInfo -> []
+                 MinimalDebugInfo -> ["-g1"]
+                 NormalDebugInfo -> ["-g"]
+                 MaximalDebugInfo -> ["-g3"]
              )
           ++ cxxOptions bi
     , ghcOptCcProgram =
@@ -471,10 +469,10 @@ componentAsmGhcOptions verbosity lbi bi clbi odir filename =
             _ -> ["-O2"]
         )
           ++ ( case withDebugInfo lbi of
-                NoDebugInfo -> []
-                MinimalDebugInfo -> ["-g1"]
-                NormalDebugInfo -> ["-g"]
-                MaximalDebugInfo -> ["-g3"]
+                 NoDebugInfo -> []
+                 MinimalDebugInfo -> ["-g1"]
+                 NormalDebugInfo -> ["-g"]
+                 MaximalDebugInfo -> ["-g3"]
              )
           ++ asmOptions bi
     , ghcOptObjDir = toFlag odir
diff --git a/Cabal/src/Distribution/Simple/GHCJS.hs b/Cabal/src/Distribution/Simple/GHCJS.hs
index 4e14bc0..bd4e659 100644
--- a/Cabal/src/Distribution/Simple/GHCJS.hs
+++ b/Cabal/src/Distribution/Simple/GHCJS.hs
@@ -408,8 +408,8 @@ getInstalledPackages'
 getInstalledPackages' verbosity packagedbs progdb =
   sequenceA
     [ do
-      pkgs <- HcPkg.dump (hcPkgInfo progdb) verbosity packagedb
-      return (packagedb, pkgs)
+        pkgs <- HcPkg.dump (hcPkgInfo progdb) verbosity packagedb
+        return (packagedb, pkgs)
     | packagedb <- packagedbs
     ]
 
@@ -1415,44 +1415,44 @@ gbuild verbosity numJobs pkg_descr lbi bm clbi = do
     info verbosity "Building C++ Sources..."
     sequence_
       [ do
-        let baseCxxOpts =
-              Internal.componentCxxGhcOptions
-                verbosity
-                lbi
-                bnfo
-                clbi
-                tmpDir
-                filename
-            vanillaCxxOpts =
-              if isGhcDynamic
-                then -- Dynamic GHC requires C++ sources to be built
-                -- with -fPIC for REPL to work. See #2207.
-                  baseCxxOpts{ghcOptFPic = toFlag True}
-                else baseCxxOpts
-            profCxxOpts =
-              vanillaCxxOpts
-                `mappend` mempty
-                  { ghcOptProfilingMode = toFlag True
-                  }
-            sharedCxxOpts =
-              vanillaCxxOpts
-                `mappend` mempty
-                  { ghcOptFPic = toFlag True
-                  , ghcOptDynLinkMode = toFlag GhcDynamicOnly
-                  }
-            opts
-              | needProfiling = profCxxOpts
-              | needDynamic = sharedCxxOpts
-              | otherwise = vanillaCxxOpts
-            -- TODO: Placing all Haskell, C, & C++ objects in a single directory
-            --       Has the potential for file collisions. In general we would
-            --       consider this a user error. However, we should strive to
-            --       add a warning if this occurs.
-            odir = fromFlag (ghcOptObjDir opts)
-        createDirectoryIfMissingVerbose verbosity True odir
-        needsRecomp <- checkNeedsRecompilation filename opts
-        when needsRecomp $
-          runGhcProg opts
+          let baseCxxOpts =
+                Internal.componentCxxGhcOptions
+                  verbosity
+                  lbi
+                  bnfo
+                  clbi
+                  tmpDir
+                  filename
+              vanillaCxxOpts =
+                if isGhcDynamic
+                  then -- Dynamic GHC requires C++ sources to be built
+                  -- with -fPIC for REPL to work. See #2207.
+                    baseCxxOpts{ghcOptFPic = toFlag True}
+                  else baseCxxOpts
+              profCxxOpts =
+                vanillaCxxOpts
+                  `mappend` mempty
+                    { ghcOptProfilingMode = toFlag True
+                    }
+              sharedCxxOpts =
+                vanillaCxxOpts
+                  `mappend` mempty
+                    { ghcOptFPic = toFlag True
+                    , ghcOptDynLinkMode = toFlag GhcDynamicOnly
+                    }
+              opts
+                | needProfiling = profCxxOpts
+                | needDynamic = sharedCxxOpts
+                | otherwise = vanillaCxxOpts
+              -- TODO: Placing all Haskell, C, & C++ objects in a single directory
+              --       Has the potential for file collisions. In general we would
+              --       consider this a user error. However, we should strive to
+              --       add a warning if this occurs.
+              odir = fromFlag (ghcOptObjDir opts)
+          createDirectoryIfMissingVerbose verbosity True odir
+          needsRecomp <- checkNeedsRecompilation filename opts
+          when needsRecomp $
+            runGhcProg opts
       | filename <- cxxSrcs
       ]
 
@@ -1461,40 +1461,40 @@ gbuild verbosity numJobs pkg_descr lbi bm clbi = do
     info verbosity "Building C Sources..."
     sequence_
       [ do
-        let baseCcOpts =
-              Internal.componentCcGhcOptions
-                verbosity
-                lbi
-                bnfo
-                clbi
-                tmpDir
-                filename
-            vanillaCcOpts =
-              if isGhcDynamic
-                then -- Dynamic GHC requires C sources to be built
-                -- with -fPIC for REPL to work. See #2207.
-                  baseCcOpts{ghcOptFPic = toFlag True}
-                else baseCcOpts
-            profCcOpts =
-              vanillaCcOpts
-                `mappend` mempty
-                  { ghcOptProfilingMode = toFlag True
-                  }
-            sharedCcOpts =
-              vanillaCcOpts
-                `mappend` mempty
-                  { ghcOptFPic = toFlag True
-                  , ghcOptDynLinkMode = toFlag GhcDynamicOnly
-                  }
-            opts
-              | needProfiling = profCcOpts
-              | needDynamic = sharedCcOpts
-              | otherwise = vanillaCcOpts
-            odir = fromFlag (ghcOptObjDir opts)
-        createDirectoryIfMissingVerbose verbosity True odir
-        needsRecomp <- checkNeedsRecompilation filename opts
-        when needsRecomp $
-          runGhcProg opts
+          let baseCcOpts =
+                Internal.componentCcGhcOptions
+                  verbosity
+                  lbi
+                  bnfo
+                  clbi
+                  tmpDir
+                  filename
+              vanillaCcOpts =
+                if isGhcDynamic
+                  then -- Dynamic GHC requires C sources to be built
+                  -- with -fPIC for REPL to work. See #2207.
+                    baseCcOpts{ghcOptFPic = toFlag True}
+                  else baseCcOpts
+              profCcOpts =
+                vanillaCcOpts
+                  `mappend` mempty
+                    { ghcOptProfilingMode = toFlag True
+                    }
+              sharedCcOpts =
+                vanillaCcOpts
+                  `mappend` mempty
+                    { ghcOptFPic = toFlag True
+                    , ghcOptDynLinkMode = toFlag GhcDynamicOnly
+                    }
+              opts
+                | needProfiling = profCcOpts
+                | needDynamic = sharedCcOpts
+                | otherwise = vanillaCcOpts
+              odir = fromFlag (ghcOptObjDir opts)
+          createDirectoryIfMissingVerbose verbosity True odir
+          needsRecomp <- checkNeedsRecompilation filename opts
+          when needsRecomp $
+            runGhcProg opts
       | filename <- cSrcs
       ]
 
@@ -1884,9 +1884,9 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir _pkg lib clbi = do
     whenShared $
       sequence_
         [ installShared
-          builtDir'
-          dynlibTargetDir
-          (toJSLibName $ mkGenericSharedLibName platform compiler_id (l ++ f))
+            builtDir'
+            dynlibTargetDir
+            (toJSLibName $ mkGenericSharedLibName platform compiler_id (l ++ f))
         | l <- getHSLibraryName uid : extraBundledLibs (libBuildInfo lib)
         , f <- "" : extraDynLibFlavours (libBuildInfo lib)
         ]
diff --git a/Cabal/src/Distribution/Simple/Glob.hs b/Cabal/src/Distribution/Simple/Glob.hs
index 9ce97d7..fcac932 100644
--- a/Cabal/src/Distribution/Simple/Glob.hs
+++ b/Cabal/src/Distribution/Simple/Glob.hs
@@ -100,11 +100,11 @@ matchDirFileGlobWithDie verbosity rip version dir filepath = case parseFileGlob
     let errors :: [String]
         errors =
           [ "filepath wildcard '"
-            ++ filepath
-            ++ "' refers to the directory"
-            ++ " '"
-            ++ missingDir
-            ++ "', which does not exist or is not a directory."
+              ++ filepath
+              ++ "' refers to the directory"
+              ++ " '"
+              ++ missingDir
+              ++ "', which does not exist or is not a directory."
           | missingDir <- missingDirectories
           ]
             ++ [ "filepath wildcard '" ++ filepath ++ "' does not match any files."
diff --git a/Cabal/src/Distribution/Simple/Glob/Internal.hs b/Cabal/src/Distribution/Simple/Glob/Internal.hs
index 4f0b91e..2d90559 100644
--- a/Cabal/src/Distribution/Simple/Glob/Internal.hs
+++ b/Cabal/src/Distribution/Simple/Glob/Internal.hs
@@ -458,7 +458,6 @@ checkNameMatches spec glob candidate
       if enableMultidot spec
         then pure (GlobMatch ())
         else -- if not, issue a warning saying multidot is needed for the match
-
           let (_, candidateExts) = splitExtensions $ takeFileName candidate
               extractExts :: GlobPieces -> Maybe String
               extractExts [] = Nothing
diff --git a/Cabal/src/Distribution/Simple/Haddock.hs b/Cabal/src/Distribution/Simple/Haddock.hs
index 33d4972..f29bf89 100644
--- a/Cabal/src/Distribution/Simple/Haddock.hs
+++ b/Cabal/src/Distribution/Simple/Haddock.hs
@@ -993,41 +993,41 @@ haddockPackagePaths
   :: [InstalledPackageInfo]
   -> Maybe (InstalledPackageInfo -> FilePath)
   -> IO
-      ( [ ( FilePath -- path to interface
-      -- file
-          , Maybe FilePath -- url to html
-          -- documentation
-          , Maybe FilePath -- url to hyperlinked
-          -- source
-          , Visibility
-          )
-        ]
-      , Maybe String -- warning about
-      -- missing documentation
-      )
+       ( [ ( FilePath -- path to interface
+       -- file
+           , Maybe FilePath -- url to html
+           -- documentation
+           , Maybe FilePath -- url to hyperlinked
+           -- source
+           , Visibility
+           )
+         ]
+       , Maybe String -- warning about
+       -- missing documentation
+       )
 haddockPackagePaths ipkgs mkHtmlPath = do
   interfaces <-
     sequenceA
       [ case interfaceAndHtmlPath ipkg of
-        Nothing -> return (Left (packageId ipkg))
-        Just (interface, html) -> do
-          (html', hypsrc') <-
-            case html of
-              Just htmlPath -> do
-                let hypSrcPath = htmlPath </> defaultHyperlinkedSourceDirectory
-                hypSrcExists <- doesDirectoryExist hypSrcPath
-                return $
-                  ( Just (fixFileUrl htmlPath)
-                  , if hypSrcExists
-                      then Just (fixFileUrl hypSrcPath)
-                      else Nothing
-                  )
-              Nothing -> return (Nothing, Nothing)
+          Nothing -> return (Left (packageId ipkg))
+          Just (interface, html) -> do
+            (html', hypsrc') <-
+              case html of
+                Just htmlPath -> do
+                  let hypSrcPath = htmlPath </> defaultHyperlinkedSourceDirectory
+                  hypSrcExists <- doesDirectoryExist hypSrcPath
+                  return $
+                    ( Just (fixFileUrl htmlPath)
+                    , if hypSrcExists
+                        then Just (fixFileUrl hypSrcPath)
+                        else Nothing
+                    )
+                Nothing -> return (Nothing, Nothing)
 
-          exists <- doesFileExist interface
-          if exists
-            then return (Right (interface, html', hypsrc', Visible))
-            else return (Left pkgid)
+            exists <- doesFileExist interface
+            if exists
+              then return (Right (interface, html', hypsrc', Visible))
+              else return (Left pkgid)
       | ipkg <- ipkgs
       , let pkgid = packageId ipkg
       , pkgName pkgid `notElem` noHaddockWhitelist
@@ -1075,18 +1075,18 @@ haddockPackageFlags
   -> ComponentLocalBuildInfo
   -> Maybe PathTemplate
   -> IO
-      ( [ ( FilePath -- path to interface
-      -- file
-          , Maybe FilePath -- url to html
-          -- documentation
-          , Maybe FilePath -- url to hyperlinked
-          -- source
-          , Visibility
-          )
-        ]
-      , Maybe String -- warning about
-      -- missing documentation
-      )
+       ( [ ( FilePath -- path to interface
+       -- file
+           , Maybe FilePath -- url to html
+           -- documentation
+           , Maybe FilePath -- url to hyperlinked
+           -- source
+           , Visibility
+           )
+         ]
+       , Maybe String -- warning about
+       -- missing documentation
+       )
 haddockPackageFlags verbosity lbi clbi htmlTemplate = do
   let allPkgs = installedPkgs lbi
       directDeps = map fst (componentPackageDeps clbi)
diff --git a/Cabal/src/Distribution/Simple/Install.hs b/Cabal/src/Distribution/Simple/Install.hs
index 789845c..1bfc03f 100644
--- a/Cabal/src/Distribution/Simple/Install.hs
+++ b/Cabal/src/Distribution/Simple/Install.hs
@@ -305,8 +305,8 @@ installIncludeFiles verbosity libBi lbi buildPref destIncludeDir = do
   incs <- traverse (findInc incdirs) (installIncludes libBi)
   sequence_
     [ do
-      createDirectoryIfMissingVerbose verbosity True destDir
-      installOrdinaryFile verbosity srcFile destFile
+        createDirectoryIfMissingVerbose verbosity True destDir
+        installOrdinaryFile verbosity srcFile destFile
     | (relFile, srcFile) <- incs
     , let destFile = destIncludeDir </> relFile
           destDir = takeDirectory destFile
diff --git a/Cabal/src/Distribution/Simple/PackageIndex.hs b/Cabal/src/Distribution/Simple/PackageIndex.hs
index 927e10a..c2e39dd 100644
--- a/Cabal/src/Distribution/Simple/PackageIndex.hs
+++ b/Cabal/src/Distribution/Simple/PackageIndex.hs
@@ -201,12 +201,12 @@ invariant (PackageIndex pids pnames) =
 
 mkPackageIndex
   :: WithCallStack
-      ( Map UnitId IPI.InstalledPackageInfo
-        -> Map
-            (PackageName, LibraryName)
-            (Map Version [IPI.InstalledPackageInfo])
-        -> InstalledPackageIndex
-      )
+       ( Map UnitId IPI.InstalledPackageInfo
+         -> Map
+              (PackageName, LibraryName)
+              (Map Version [IPI.InstalledPackageInfo])
+         -> InstalledPackageIndex
+       )
 mkPackageIndex pids pnames = assert (invariant index) index
   where
     index = PackageIndex pids pnames
@@ -629,8 +629,8 @@ dependencyClosure
   :: InstalledPackageIndex
   -> [UnitId]
   -> Either
-      (InstalledPackageIndex)
-      [(IPI.InstalledPackageInfo, [UnitId])]
+       (InstalledPackageIndex)
+       [(IPI.InstalledPackageInfo, [UnitId])]
 dependencyClosure index pkgids0 = case closure mempty [] pkgids0 of
   (completed, []) -> Left completed
   (completed, _) -> Right (brokenPackages completed)
diff --git a/Cabal/src/Distribution/Simple/PreProcess.hs b/Cabal/src/Distribution/Simple/PreProcess.hs
index 4f69ce6..cde4998 100644
--- a/Cabal/src/Distribution/Simple/PreProcess.hs
+++ b/Cabal/src/Distribution/Simple/PreProcess.hs
@@ -243,14 +243,14 @@ preprocessComponent pd comp lbi clbi isSrcDist verbosity handlers =
                  ]
       sequence_
         [ preprocessFile
-          (map unsafeMakeSymbolicPath sourceDirs)
-          dir
-          isSrcDist
-          (ModuleName.toFilePath modu)
-          verbosity
-          builtinSuffixes
-          biHandlers
-          False
+            (map unsafeMakeSymbolicPath sourceDirs)
+            dir
+            isSrcDist
+            (ModuleName.toFilePath modu)
+            verbosity
+            builtinSuffixes
+            biHandlers
+            False
         | modu <- modules
         ]
       -- XXX: what we do here (re SymbolicPath dir)
@@ -517,8 +517,8 @@ ppHsc2hs bi lbi clbi =
       ]
         ++ [ "--lflag=" ++ opt
            | opt <-
-              programDefaultArgs gccProg
-                ++ programOverrideArgs gccProg
+               programDefaultArgs gccProg
+                 ++ programOverrideArgs gccProg
            ]
         -- OSX frameworks:
         ++ [ what ++ "=-F" ++ opt
@@ -542,37 +542,37 @@ ppHsc2hs bi lbi clbi =
         ++ ["--cflag=-I" ++ buildDir lbi </> dir | dir <- PD.includeDirs bi]
         ++ [ "--cflag=" ++ opt
            | opt <-
-              PD.ccOptions bi
-                ++ PD.cppOptions bi
-                -- hsc2hs uses the C ABI
-                -- We assume that there are only C sources
-                -- and C++ functions are exported via a C
-                -- interface and wrapped in a C source file.
-                -- Therefore we do not supply C++ flags
-                -- because there will not be C++ sources.
-                --
-                -- DO NOT add PD.cxxOptions unless this changes!
+               PD.ccOptions bi
+                 ++ PD.cppOptions bi
+                 -- hsc2hs uses the C ABI
+                 -- We assume that there are only C sources
+                 -- and C++ functions are exported via a C
+                 -- interface and wrapped in a C source file.
+                 -- Therefore we do not supply C++ flags
+                 -- because there will not be C++ sources.
+                 --
+                 -- DO NOT add PD.cxxOptions unless this changes!
            ]
         ++ [ "--cflag=" ++ opt
            | opt <-
-              [ "-I" ++ autogenComponentModulesDir lbi clbi
-              , "-I" ++ autogenPackageModulesDir lbi
-              , "-include"
-              , autogenComponentModulesDir lbi clbi </> cppHeaderName
-              ]
+               [ "-I" ++ autogenComponentModulesDir lbi clbi
+               , "-I" ++ autogenPackageModulesDir lbi
+               , "-include"
+               , autogenComponentModulesDir lbi clbi </> cppHeaderName
+               ]
            ]
         ++ [ "--lflag=-L" ++ opt
            | opt <-
-              if withFullyStaticExe lbi
-                then PD.extraLibDirsStatic bi
-                else PD.extraLibDirs bi
+               if withFullyStaticExe lbi
+                 then PD.extraLibDirsStatic bi
+                 else PD.extraLibDirs bi
            ]
         ++ [ "--lflag=-Wl,-R," ++ opt
            | isELF
            , opt <-
-              if withFullyStaticExe lbi
-                then PD.extraLibDirsStatic bi
-                else PD.extraLibDirs bi
+               if withFullyStaticExe lbi
+                 then PD.extraLibDirsStatic bi
+                 else PD.extraLibDirs bi
            ]
         ++ ["--lflag=-l" ++ opt | opt <- PD.extraLibs bi]
         ++ ["--lflag=" ++ opt | opt <- PD.ldOptions bi]
@@ -580,22 +580,22 @@ ppHsc2hs bi lbi clbi =
         ++ [ "--cflag=" ++ opt
            | pkg <- pkgs
            , opt <-
-              ["-I" ++ opt | opt <- Installed.includeDirs pkg]
-                ++ Installed.ccOptions pkg
+               ["-I" ++ opt | opt <- Installed.includeDirs pkg]
+                 ++ Installed.ccOptions pkg
            ]
         ++ [ "--lflag=" ++ opt
            | pkg <- pkgs
            , opt <-
-              ["-L" ++ opt | opt <- Installed.libraryDirs pkg]
-                ++ [ "-Wl,-R," ++ opt | isELF, opt <- Installed.libraryDirs pkg
-                   ]
-                ++ [ "-l" ++ opt
-                   | opt <-
-                      if withFullyStaticExe lbi
-                        then Installed.extraLibrariesStatic pkg
-                        else Installed.extraLibraries pkg
-                   ]
-                ++ Installed.ldOptions pkg
+               ["-L" ++ opt | opt <- Installed.libraryDirs pkg]
+                 ++ [ "-Wl,-R," ++ opt | isELF, opt <- Installed.libraryDirs pkg
+                    ]
+                 ++ [ "-l" ++ opt
+                    | opt <-
+                        if withFullyStaticExe lbi
+                          then Installed.extraLibrariesStatic pkg
+                          else Installed.extraLibraries pkg
+                    ]
+                 ++ Installed.ldOptions pkg
            ]
         ++ preccldFlags
         ++ hsc2hsOptions bi
@@ -673,19 +673,20 @@ ppC2hs bi lbi clbi =
                 ++ [ "--cppopts=" ++ opt
                    | pkg <- pkgs
                    , opt <-
-                      ["-I" ++ opt | opt <- Installed.includeDirs pkg]
-                        ++ [ opt | opt@('-' : c : _) <- Installed.ccOptions pkg,
-                           -- c2hs uses the C ABI
-                           -- We assume that there are only C sources
-                           -- and C++ functions are exported via a C
-                           -- interface and wrapped in a C source file.
-                           -- Therefore we do not supply C++ flags
-                           -- because there will not be C++ sources.
-                           --
-                           --
-                           -- DO NOT add Installed.cxxOptions unless this changes!
-                           c `elem` "DIU"
-                           ]
+                       ["-I" ++ opt | opt <- Installed.includeDirs pkg]
+                         ++ [ opt
+                            | opt@('-' : c : _) <- Installed.ccOptions pkg
+                            , -- c2hs uses the C ABI
+                            -- We assume that there are only C sources
+                            -- and C++ functions are exported via a C
+                            -- interface and wrapped in a C source file.
+                            -- Therefore we do not supply C++ flags
+                            -- because there will not be C++ sources.
+                            --
+                            --
+                            -- DO NOT add Installed.cxxOptions unless this changes!
+                            c `elem` "DIU"
+                            ]
                    ]
                 -- TODO: install .chi files for packages, so we can --include
                 -- those dirs here, for the dependencies
diff --git a/Cabal/src/Distribution/Simple/Program/Script.hs b/Cabal/src/Distribution/Simple/Program/Script.hs
index f89db34..b90663a 100644
--- a/Cabal/src/Distribution/Simple/Program/Script.hs
+++ b/Cabal/src/Distribution/Simple/Program/Script.hs
@@ -45,11 +45,11 @@ invocationAsShellScript
         ++ concatMap setEnv envExtra
         ++ ["cd " ++ quote cwd | cwd <- maybeToList mcwd]
         ++ [ ( case minput of
-                Nothing -> ""
-                Just input -> "printf '%s' " ++ quote (iodataToText input) ++ " | "
+                 Nothing -> ""
+                 Just input -> "printf '%s' " ++ quote (iodataToText input) ++ " | "
              )
-              ++ unwords (map quote $ path : args)
-              ++ " \"$@\""
+               ++ unwords (map quote $ path : args)
+               ++ " \"$@\""
            ]
     where
       setEnv (var, Nothing) = ["unset " ++ var, "export " ++ var]
@@ -87,10 +87,10 @@ invocationAsBatchFile
             ["("]
               ++ ["echo " ++ escape line | line <- lines $ iodataToText input]
               ++ [ ") | "
-                    ++ "\""
-                    ++ path
-                    ++ "\""
-                    ++ concatMap (\arg -> ' ' : quote arg) args
+                     ++ "\""
+                     ++ path
+                     ++ "\""
+                     ++ concatMap (\arg -> ' ' : quote arg) args
                  ]
     where
       setEnv (var, Nothing) = "set " ++ var ++ "="
diff --git a/Cabal/src/Distribution/Simple/Register.hs b/Cabal/src/Distribution/Simple/Register.hs
index 4cfc5ba..3a6c616 100644
--- a/Cabal/src/Distribution/Simple/Register.hs
+++ b/Cabal/src/Distribution/Simple/Register.hs
@@ -267,7 +267,6 @@ generateRegistrationInfo verbosity pkg lib lbi clbi inplace reloc distPref packa
       then -- NB: With an inplace installation, the user may run './Setup
       -- build' to update the library files, without reregistering.
       -- In this case, it is critical that the ABI hash not flip.
-
         return
           ( inplaceInstalledPackageInfo
               pwd
diff --git a/Cabal/src/Distribution/Simple/Setup/Config.hs b/Cabal/src/Distribution/Simple/Setup/Config.hs
index c2af17b..aa267fa 100644
--- a/Cabal/src/Distribution/Simple/Setup/Config.hs
+++ b/Cabal/src/Distribution/Simple/Setup/Config.hs
@@ -451,406 +451,406 @@ configureOptions showOrParseArgs =
   ]
     ++ map liftInstallDirs installDirsOptions
     ++ [ option
-          ""
-          ["program-prefix"]
-          "prefix to be applied to installed executables"
-          configProgPrefix
-          (\v flags -> flags{configProgPrefix = v})
-          (reqPathTemplateArgFlag "PREFIX")
+           ""
+           ["program-prefix"]
+           "prefix to be applied to installed executables"
+           configProgPrefix
+           (\v flags -> flags{configProgPrefix = v})
+           (reqPathTemplateArgFlag "PREFIX")
        , option
-          ""
-          ["program-suffix"]
-          "suffix to be applied to installed executables"
-          configProgSuffix
-          (\v flags -> flags{configProgSuffix = v})
-          (reqPathTemplateArgFlag "SUFFIX")
+           ""
+           ["program-suffix"]
+           "suffix to be applied to installed executables"
+           configProgSuffix
+           (\v flags -> flags{configProgSuffix = v})
+           (reqPathTemplateArgFlag "SUFFIX")
        , option
-          ""
-          ["library-vanilla"]
-          "Vanilla libraries"
-          configVanillaLib
-          (\v flags -> flags{configVanillaLib = v})
-          (boolOpt [] [])
+           ""
+           ["library-vanilla"]
+           "Vanilla libraries"
+           configVanillaLib
+           (\v flags -> flags{configVanillaLib = v})
+           (boolOpt [] [])
        , option
-          "p"
-          ["library-profiling"]
-          "Library profiling"
-          configProfLib
-          (\v flags -> flags{configProfLib = v})
-          (boolOpt "p" [])
+           "p"
+           ["library-profiling"]
+           "Library profiling"
+           configProfLib
+           (\v flags -> flags{configProfLib = v})
+           (boolOpt "p" [])
        , option
-          ""
-          ["shared"]
-          "Shared library"
-          configSharedLib
-          (\v flags -> flags{configSharedLib = v})
-          (boolOpt [] [])
+           ""
+           ["shared"]
+           "Shared library"
+           configSharedLib
+           (\v flags -> flags{configSharedLib = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["static"]
-          "Static library"
-          configStaticLib
-          (\v flags -> flags{configStaticLib = v})
-          (boolOpt [] [])
+           ""
+           ["static"]
+           "Static library"
+           configStaticLib
+           (\v flags -> flags{configStaticLib = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["executable-dynamic"]
-          "Executable dynamic linking"
-          configDynExe
-          (\v flags -> flags{configDynExe = v})
-          (boolOpt [] [])
+           ""
+           ["executable-dynamic"]
+           "Executable dynamic linking"
+           configDynExe
+           (\v flags -> flags{configDynExe = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["executable-static"]
-          "Executable fully static linking"
-          configFullyStaticExe
-          (\v flags -> flags{configFullyStaticExe = v})
-          (boolOpt [] [])
+           ""
+           ["executable-static"]
+           "Executable fully static linking"
+           configFullyStaticExe
+           (\v flags -> flags{configFullyStaticExe = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["profiling"]
-          "Executable and library profiling"
-          configProf
-          (\v flags -> flags{configProf = v})
-          (boolOpt [] [])
+           ""
+           ["profiling"]
+           "Executable and library profiling"
+           configProf
+           (\v flags -> flags{configProf = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["executable-profiling"]
-          "Executable profiling (DEPRECATED)"
-          configProfExe
-          (\v flags -> flags{configProfExe = v})
-          (boolOpt [] [])
+           ""
+           ["executable-profiling"]
+           "Executable profiling (DEPRECATED)"
+           configProfExe
+           (\v flags -> flags{configProfExe = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["profiling-detail"]
-          ( "Profiling detail level for executable and library (default, "
-              ++ "none, exported-functions, toplevel-functions,  all-functions, late)."
-          )
-          configProfDetail
-          (\v flags -> flags{configProfDetail = v})
-          ( reqArg'
-              "level"
-              (Flag . flagToProfDetailLevel)
-              showProfDetailLevelFlag
-          )
+           ""
+           ["profiling-detail"]
+           ( "Profiling detail level for executable and library (default, "
+               ++ "none, exported-functions, toplevel-functions,  all-functions, late)."
+           )
+           configProfDetail
+           (\v flags -> flags{configProfDetail = v})
+           ( reqArg'
+               "level"
+               (Flag . flagToProfDetailLevel)
+               showProfDetailLevelFlag
+           )
        , option
-          ""
-          ["library-profiling-detail"]
-          "Profiling detail level for libraries only."
-          configProfLibDetail
-          (\v flags -> flags{configProfLibDetail = v})
-          ( reqArg'
-              "level"
-              (Flag . flagToProfDetailLevel)
-              showProfDetailLevelFlag
-          )
+           ""
+           ["library-profiling-detail"]
+           "Profiling detail level for libraries only."
+           configProfLibDetail
+           (\v flags -> flags{configProfLibDetail = v})
+           ( reqArg'
+               "level"
+               (Flag . flagToProfDetailLevel)
+               showProfDetailLevelFlag
+           )
        , multiOption
-          "optimization"
-          configOptimization
-          (\v flags -> flags{configOptimization = v})
-          [ optArgDef'
-              "n"
-              (show NoOptimisation, Flag . flagToOptimisationLevel)
-              ( \f -> case f of
-                  Flag NoOptimisation -> []
-                  Flag NormalOptimisation -> [Nothing]
-                  Flag MaximumOptimisation -> [Just "2"]
-                  _ -> []
-              )
-              "O"
-              ["enable-optimization", "enable-optimisation"]
-              "Build with optimization (n is 0--2, default is 1)"
-          , noArg
-              (Flag NoOptimisation)
-              []
-              ["disable-optimization", "disable-optimisation"]
-              "Build without optimization"
-          ]
+           "optimization"
+           configOptimization
+           (\v flags -> flags{configOptimization = v})
+           [ optArgDef'
+               "n"
+               (show NoOptimisation, Flag . flagToOptimisationLevel)
+               ( \f -> case f of
+                   Flag NoOptimisation -> []
+                   Flag NormalOptimisation -> [Nothing]
+                   Flag MaximumOptimisation -> [Just "2"]
+                   _ -> []
+               )
+               "O"
+               ["enable-optimization", "enable-optimisation"]
+               "Build with optimization (n is 0--2, default is 1)"
+           , noArg
+               (Flag NoOptimisation)
+               []
+               ["disable-optimization", "disable-optimisation"]
+               "Build without optimization"
+           ]
        , multiOption
-          "debug-info"
-          configDebugInfo
-          (\v flags -> flags{configDebugInfo = v})
-          [ optArg'
-              "n"
-              (Flag . flagToDebugInfoLevel)
-              ( \f -> case f of
-                  Flag NoDebugInfo -> []
-                  Flag MinimalDebugInfo -> [Just "1"]
-                  Flag NormalDebugInfo -> [Nothing]
-                  Flag MaximalDebugInfo -> [Just "3"]
-                  _ -> []
-              )
-              ""
-              ["enable-debug-info"]
-              "Emit debug info (n is 0--3, default is 0)"
-          , noArg
-              (Flag NoDebugInfo)
-              []
-              ["disable-debug-info"]
-              "Don't emit debug info"
-          ]
+           "debug-info"
+           configDebugInfo
+           (\v flags -> flags{configDebugInfo = v})
+           [ optArg'
+               "n"
+               (Flag . flagToDebugInfoLevel)
+               ( \f -> case f of
+                   Flag NoDebugInfo -> []
+                   Flag MinimalDebugInfo -> [Just "1"]
+                   Flag NormalDebugInfo -> [Nothing]
+                   Flag MaximalDebugInfo -> [Just "3"]
+                   _ -> []
+               )
+               ""
+               ["enable-debug-info"]
+               "Emit debug info (n is 0--3, default is 0)"
+           , noArg
+               (Flag NoDebugInfo)
+               []
+               ["disable-debug-info"]
+               "Don't emit debug info"
+           ]
        , multiOption
-          "build-info"
-          configDumpBuildInfo
-          (\v flags -> flags{configDumpBuildInfo = v})
-          [ noArg
-              (Flag DumpBuildInfo)
-              []
-              ["enable-build-info"]
-              "Enable build information generation during project building"
-          , noArg
-              (Flag NoDumpBuildInfo)
-              []
-              ["disable-build-info"]
-              "Disable build information generation during project building"
-          ]
+           "build-info"
+           configDumpBuildInfo
+           (\v flags -> flags{configDumpBuildInfo = v})
+           [ noArg
+               (Flag DumpBuildInfo)
+               []
+               ["enable-build-info"]
+               "Enable build information generation during project building"
+           , noArg
+               (Flag NoDumpBuildInfo)
+               []
+               ["disable-build-info"]
+               "Disable build information generation during project building"
+           ]
        , option
-          ""
-          ["library-for-ghci"]
-          "compile library for use with GHCi"
-          configGHCiLib
-          (\v flags -> flags{configGHCiLib = v})
-          (boolOpt [] [])
+           ""
+           ["library-for-ghci"]
+           "compile library for use with GHCi"
+           configGHCiLib
+           (\v flags -> flags{configGHCiLib = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["split-sections"]
-          "compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)"
-          configSplitSections
-          (\v flags -> flags{configSplitSections = v})
-          (boolOpt [] [])
+           ""
+           ["split-sections"]
+           "compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)"
+           configSplitSections
+           (\v flags -> flags{configSplitSections = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["split-objs"]
-          "split library into smaller objects to reduce binary sizes (GHC 6.6+)"
-          configSplitObjs
-          (\v flags -> flags{configSplitObjs = v})
-          (boolOpt [] [])
+           ""
+           ["split-objs"]
+           "split library into smaller objects to reduce binary sizes (GHC 6.6+)"
+           configSplitObjs
+           (\v flags -> flags{configSplitObjs = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["executable-stripping"]
-          "strip executables upon installation to reduce binary sizes"
-          configStripExes
-          (\v flags -> flags{configStripExes = v})
-          (boolOpt [] [])
+           ""
+           ["executable-stripping"]
+           "strip executables upon installation to reduce binary sizes"
+           configStripExes
+           (\v flags -> flags{configStripExes = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["library-stripping"]
-          "strip libraries upon installation to reduce binary sizes"
-          configStripLibs
-          (\v flags -> flags{configStripLibs = v})
-          (boolOpt [] [])
+           ""
+           ["library-stripping"]
+           "strip libraries upon installation to reduce binary sizes"
+           configStripLibs
+           (\v flags -> flags{configStripLibs = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["configure-option"]
-          "Extra option for configure"
-          configConfigureArgs
-          (\v flags -> flags{configConfigureArgs = v})
-          (reqArg' "OPT" (\x -> [x]) id)
+           ""
+           ["configure-option"]
+           "Extra option for configure"
+           configConfigureArgs
+           (\v flags -> flags{configConfigureArgs = v})
+           (reqArg' "OPT" (\x -> [x]) id)
        , option
-          ""
-          ["user-install"]
-          "doing a per-user installation"
-          configUserInstall
-          (\v flags -> flags{configUserInstall = v})
-          (boolOpt' ([], ["user"]) ([], ["global"]))
+           ""
+           ["user-install"]
+           "doing a per-user installation"
+           configUserInstall
+           (\v flags -> flags{configUserInstall = v})
+           (boolOpt' ([], ["user"]) ([], ["global"]))
        , option
-          ""
-          ["package-db"]
-          ( "Append the given package database to the list of package"
-              ++ " databases used (to satisfy dependencies and register into)."
-              ++ " May be a specific file, 'global' or 'user'. The initial list"
-              ++ " is ['global'], ['global', 'user'], or ['global', $sandbox],"
-              ++ " depending on context. Use 'clear' to reset the list to empty."
-              ++ " See the user guide for details."
-          )
-          configPackageDBs
-          (\v flags -> flags{configPackageDBs = v})
-          (reqArg' "DB" readPackageDbList showPackageDbList)
+           ""
+           ["package-db"]
+           ( "Append the given package database to the list of package"
+               ++ " databases used (to satisfy dependencies and register into)."
+               ++ " May be a specific file, 'global' or 'user'. The initial list"
+               ++ " is ['global'], ['global', 'user'], or ['global', $sandbox],"
+               ++ " depending on context. Use 'clear' to reset the list to empty."
+               ++ " See the user guide for details."
+           )
+           configPackageDBs
+           (\v flags -> flags{configPackageDBs = v})
+           (reqArg' "DB" readPackageDbList showPackageDbList)
        , option
-          "f"
-          ["flags"]
-          "Force values for the given flags in Cabal conditionals in the .cabal file.  E.g., --flags=\"debug -usebytestrings\" forces the flag \"debug\" to true and \"usebytestrings\" to false."
-          configConfigurationsFlags
-          (\v flags -> flags{configConfigurationsFlags = v})
-          ( reqArg
-              "FLAGS"
-              (parsecToReadE (\err -> "Invalid flag assignment: " ++ err) legacyParsecFlagAssignment)
-              legacyShowFlagAssignment'
-          )
+           "f"
+           ["flags"]
+           "Force values for the given flags in Cabal conditionals in the .cabal file.  E.g., --flags=\"debug -usebytestrings\" forces the flag \"debug\" to true and \"usebytestrings\" to false."
+           configConfigurationsFlags
+           (\v flags -> flags{configConfigurationsFlags = v})
+           ( reqArg
+               "FLAGS"
+               (parsecToReadE (\err -> "Invalid flag assignment: " ++ err) legacyParsecFlagAssignment)
+               legacyShowFlagAssignment'
+           )
        , option
-          ""
-          ["extra-include-dirs"]
-          "A list of directories to search for header files"
-          configExtraIncludeDirs
-          (\v flags -> flags{configExtraIncludeDirs = v})
-          (reqArg' "PATH" (\x -> [x]) id)
+           ""
+           ["extra-include-dirs"]
+           "A list of directories to search for header files"
+           configExtraIncludeDirs
+           (\v flags -> flags{configExtraIncludeDirs = v})
+           (reqArg' "PATH" (\x -> [x]) id)
        , option
-          ""
-          ["deterministic"]
-          "Try to be as deterministic as possible (used by the test suite)"
-          configDeterministic
-          (\v flags -> flags{configDeterministic = v})
-          (boolOpt [] [])
+           ""
+           ["deterministic"]
+           "Try to be as deterministic as possible (used by the test suite)"
+           configDeterministic
+           (\v flags -> flags{configDeterministic = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["ipid"]
-          "Installed package ID to compile this package as"
-          configIPID
-          (\v flags -> flags{configIPID = v})
-          (reqArgFlag "IPID")
+           ""
+           ["ipid"]
+           "Installed package ID to compile this package as"
+           configIPID
+           (\v flags -> flags{configIPID = v})
+           (reqArgFlag "IPID")
        , option
-          ""
-          ["cid"]
-          "Installed component ID to compile this component as"
-          (fmap prettyShow . configCID)
-          (\v flags -> flags{configCID = fmap mkComponentId v})
-          (reqArgFlag "CID")
+           ""
+           ["cid"]
+           "Installed component ID to compile this component as"
+           (fmap prettyShow . configCID)
+           (\v flags -> flags{configCID = fmap mkComponentId v})
+           (reqArgFlag "CID")
        , option
-          ""
-          ["extra-lib-dirs"]
-          "A list of directories to search for external libraries"
-          configExtraLibDirs
-          (\v flags -> flags{configExtraLibDirs = v})
-          (reqArg' "PATH" (\x -> [x]) id)
+           ""
+           ["extra-lib-dirs"]
+           "A list of directories to search for external libraries"
+           configExtraLibDirs
+           (\v flags -> flags{configExtraLibDirs = v})
+           (reqArg' "PATH" (\x -> [x]) id)
        , option
-          ""
-          ["extra-lib-dirs-static"]
-          "A list of directories to search for external libraries when linking fully static executables"
-          configExtraLibDirsStatic
-          (\v flags -> flags{configExtraLibDirsStatic = v})
-          (reqArg' "PATH" (\x -> [x]) id)
+           ""
+           ["extra-lib-dirs-static"]
+           "A list of directories to search for external libraries when linking fully static executables"
+           configExtraLibDirsStatic
+           (\v flags -> flags{configExtraLibDirsStatic = v})
+           (reqArg' "PATH" (\x -> [x]) id)
        , option
-          ""
-          ["extra-framework-dirs"]
-          "A list of directories to search for external frameworks (OS X only)"
-          configExtraFrameworkDirs
-          (\v flags -> flags{configExtraFrameworkDirs = v})
-          (reqArg' "PATH" (\x -> [x]) id)
+           ""
+           ["extra-framework-dirs"]
+           "A list of directories to search for external frameworks (OS X only)"
+           configExtraFrameworkDirs
+           (\v flags -> flags{configExtraFrameworkDirs = v})
+           (reqArg' "PATH" (\x -> [x]) id)
        , option
-          ""
-          ["extra-prog-path"]
-          "A list of directories to search for required programs (in addition to the normal search locations)"
-          configProgramPathExtra
-          (\v flags -> flags{configProgramPathExtra = v})
-          (reqArg' "PATH" (\x -> toNubList [x]) fromNubList)
+           ""
+           ["extra-prog-path"]
+           "A list of directories to search for required programs (in addition to the normal search locations)"
+           configProgramPathExtra
+           (\v flags -> flags{configProgramPathExtra = v})
+           (reqArg' "PATH" (\x -> toNubList [x]) fromNubList)
        , option
-          ""
-          ["constraint"]
-          "A list of additional constraints on the dependencies."
-          configConstraints
-          (\v flags -> flags{configConstraints = v})
-          ( reqArg
-              "DEPENDENCY"
-              (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsec))
-              (map prettyShow)
-          )
+           ""
+           ["constraint"]
+           "A list of additional constraints on the dependencies."
+           configConstraints
+           (\v flags -> flags{configConstraints = v})
+           ( reqArg
+               "DEPENDENCY"
+               (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsec))
+               (map prettyShow)
+           )
        , option
-          ""
-          ["dependency"]
-          "A list of exact dependencies. E.g., --dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
-          configDependencies
-          (\v flags -> flags{configDependencies = v})
-          ( reqArg
-              "NAME[:COMPONENT_NAME]=CID"
-              (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
-              (map prettyGivenComponent)
-          )
+           ""
+           ["dependency"]
+           "A list of exact dependencies. E.g., --dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
+           configDependencies
+           (\v flags -> flags{configDependencies = v})
+           ( reqArg
+               "NAME[:COMPONENT_NAME]=CID"
+               (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
+               (map prettyGivenComponent)
+           )
        , option
-          ""
-          ["promised-dependency"]
-          "A list of promised dependencies. E.g., --promised-dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
-          configPromisedDependencies
-          (\v flags -> flags{configPromisedDependencies = v})
-          ( reqArg
-              "NAME[:COMPONENT_NAME]=CID"
-              (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
-              (map prettyGivenComponent)
-          )
+           ""
+           ["promised-dependency"]
+           "A list of promised dependencies. E.g., --promised-dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
+           configPromisedDependencies
+           (\v flags -> flags{configPromisedDependencies = v})
+           ( reqArg
+               "NAME[:COMPONENT_NAME]=CID"
+               (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
+               (map prettyGivenComponent)
+           )
        , option
-          ""
-          ["instantiate-with"]
-          "A mapping of signature names to concrete module instantiations."
-          configInstantiateWith
-          (\v flags -> flags{configInstantiateWith = v})
-          ( reqArg
-              "NAME=MOD"
-              (parsecToReadE ("Cannot parse module substitution: " ++) (fmap (: []) parsecModSubstEntry))
-              (map (Disp.renderStyle defaultStyle . dispModSubstEntry))
-          )
+           ""
+           ["instantiate-with"]
+           "A mapping of signature names to concrete module instantiations."
+           configInstantiateWith
+           (\v flags -> flags{configInstantiateWith = v})
+           ( reqArg
+               "NAME=MOD"
+               (parsecToReadE ("Cannot parse module substitution: " ++) (fmap (: []) parsecModSubstEntry))
+               (map (Disp.renderStyle defaultStyle . dispModSubstEntry))
+           )
        , option
-          ""
-          ["tests"]
-          "dependency checking and compilation for test suites listed in the package description file."
-          configTests
-          (\v flags -> flags{configTests = v})
-          (boolOpt [] [])
+           ""
+           ["tests"]
+           "dependency checking and compilation for test suites listed in the package description file."
+           configTests
+           (\v flags -> flags{configTests = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["coverage"]
-          "build package with Haskell Program Coverage. (GHC only)"
-          configCoverage
-          (\v flags -> flags{configCoverage = v})
-          (boolOpt [] [])
+           ""
+           ["coverage"]
+           "build package with Haskell Program Coverage. (GHC only)"
+           configCoverage
+           (\v flags -> flags{configCoverage = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["library-coverage"]
-          "build package with Haskell Program Coverage. (GHC only) (DEPRECATED)"
-          configLibCoverage
-          (\v flags -> flags{configLibCoverage = v})
-          (boolOpt [] [])
+           ""
+           ["library-coverage"]
+           "build package with Haskell Program Coverage. (GHC only) (DEPRECATED)"
+           configLibCoverage
+           (\v flags -> flags{configLibCoverage = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["exact-configuration"]
-          "All direct dependencies and flags are provided on the command line."
-          configExactConfiguration
-          (\v flags -> flags{configExactConfiguration = v})
-          trueArg
+           ""
+           ["exact-configuration"]
+           "All direct dependencies and flags are provided on the command line."
+           configExactConfiguration
+           (\v flags -> flags{configExactConfiguration = v})
+           trueArg
        , option
-          ""
-          ["benchmarks"]
-          "dependency checking and compilation for benchmarks listed in the package description file."
-          configBenchmarks
-          (\v flags -> flags{configBenchmarks = v})
-          (boolOpt [] [])
+           ""
+           ["benchmarks"]
+           "dependency checking and compilation for benchmarks listed in the package description file."
+           configBenchmarks
+           (\v flags -> flags{configBenchmarks = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["relocatable"]
-          "building a package that is relocatable. (GHC only)"
-          configRelocatable
-          (\v flags -> flags{configRelocatable = v})
-          (boolOpt [] [])
+           ""
+           ["relocatable"]
+           "building a package that is relocatable. (GHC only)"
+           configRelocatable
+           (\v flags -> flags{configRelocatable = v})
+           (boolOpt [] [])
        , option
-          ""
-          ["response-files"]
-          "enable workaround for old versions of programs like \"ar\" that do not support @file arguments"
-          configUseResponseFiles
-          (\v flags -> flags{configUseResponseFiles = v})
-          (boolOpt' ([], ["disable-response-files"]) ([], []))
+           ""
+           ["response-files"]
+           "enable workaround for old versions of programs like \"ar\" that do not support @file arguments"
+           configUseResponseFiles
+           (\v flags -> flags{configUseResponseFiles = v})
+           (boolOpt' ([], ["disable-response-files"]) ([], []))
        , option
-          ""
-          ["allow-depending-on-private-libs"]
-          ( "Allow depending on private libraries. "
-              ++ "If set, the library visibility check MUST be done externally."
-          )
-          configAllowDependingOnPrivateLibs
-          (\v flags -> flags{configAllowDependingOnPrivateLibs = v})
-          trueArg
+           ""
+           ["allow-depending-on-private-libs"]
+           ( "Allow depending on private libraries. "
+               ++ "If set, the library visibility check MUST be done externally."
+           )
+           configAllowDependingOnPrivateLibs
+           (\v flags -> flags{configAllowDependingOnPrivateLibs = v})
+           trueArg
        , option
-          ""
-          ["coverage-for"]
-          "A list of unit-ids of libraries to include in the Haskell Program Coverage report."
-          configCoverageFor
-          ( \v flags ->
-              flags
-                { configCoverageFor =
-                    mergeListFlag (configCoverageFor flags) v
-                }
-          )
-          ( reqArg'
-              "UNITID"
-              (Flag . (: []) . fromString)
-              (fmap prettyShow . fromFlagOrDefault [])
-          )
+           ""
+           ["coverage-for"]
+           "A list of unit-ids of libraries to include in the Haskell Program Coverage report."
+           configCoverageFor
+           ( \v flags ->
+               flags
+                 { configCoverageFor =
+                     mergeListFlag (configCoverageFor flags) v
+                 }
+           )
+           ( reqArg'
+               "UNITID"
+               (Flag . (: []) . fromString)
+               (fmap prettyShow . fromFlagOrDefault [])
+           )
        ]
   where
     liftInstallDirs =
diff --git a/Cabal/src/Distribution/Simple/SrcDist.hs b/Cabal/src/Distribution/Simple/SrcDist.hs
index 9025029..6ede5f2 100644
--- a/Cabal/src/Distribution/Simple/SrcDist.hs
+++ b/Cabal/src/Distribution/Simple/SrcDist.hs
@@ -194,10 +194,10 @@ listPackageSources' verbosity rip cwd pkg_descr pps =
       fmap concat
         . withAllLib
         $ \Library
-            { exposedModules = modules
-            , signatures = sigs
-            , libBuildInfo = libBi
-            } ->
+             { exposedModules = modules
+             , signatures = sigs
+             , libBuildInfo = libBi
+             } ->
             allSourcesBuildInfo verbosity rip cwd libBi pps (modules ++ sigs)
     , -- Executables sources.
       fmap concat
diff --git a/Cabal/src/Distribution/Simple/UHC.hs b/Cabal/src/Distribution/Simple/UHC.hs
index ce6bb95..469663e 100644
--- a/Cabal/src/Distribution/Simple/UHC.hs
+++ b/Cabal/src/Distribution/Simple/UHC.hs
@@ -297,9 +297,9 @@ constructUHCCmdLine user system lbi bi clbi odir verbosity =
     ++ ["--odir=" ++ odir]
     -- optimization
     ++ ( case withOptimization lbi of
-          NoOptimisation -> ["-O0"]
-          NormalOptimisation -> ["-O1"]
-          MaximumOptimisation -> ["-O2"]
+           NoOptimisation -> ["-O0"]
+           NormalOptimisation -> ["-O1"]
+           MaximumOptimisation -> ["-O2"]
        )
 
 uhcPackageDbOptions :: FilePath -> FilePath -> PackageDBStack -> [String]
diff --git a/Cabal/src/Distribution/Simple/Utils.hs b/Cabal/src/Distribution/Simple/Utils.hs
index 1da133c..a344daa 100644
--- a/Cabal/src/Distribution/Simple/Utils.hs
+++ b/Cabal/src/Distribution/Simple/Utils.hs
@@ -366,8 +366,8 @@ dieWithLocation' verbosity filename mb_lineno msg =
   die' verbosity $
     filename
       ++ ( case mb_lineno of
-            Just lineno -> ":" ++ show lineno
-            Nothing -> ""
+             Just lineno -> ":" ++ show lineno
+             Nothing -> ""
          )
       ++ ": "
       ++ msg
@@ -727,8 +727,8 @@ withCallStackPrefix tracer verbosity s =
         else ""
     )
       ++ ( case traceWhen verbosity tracer of
-            Just pre -> pre ++ prettyCallStack callStack ++ "\n"
-            Nothing -> ""
+             Just pre -> pre ++ prettyCallStack callStack ++ "\n"
+             Nothing -> ""
          )
       ++ s
 
@@ -812,8 +812,8 @@ exceptionWithCallStackPrefix stack verbosity s =
             else ""
         )
           ++ ( if verbosity >= verbose
-                then prettyCallStack stack ++ "\n"
-                else ""
+                 then prettyCallStack stack ++ "\n"
+                 else ""
              )
       )
 
diff --git a/cabal-install/src/Distribution/Client/BuildReports/Storage.hs b/cabal-install/src/Distribution/Client/BuildReports/Storage.hs
index 34f2c38..c86300b 100644
--- a/cabal-install/src/Distribution/Client/BuildReports/Storage.hs
+++ b/cabal-install/src/Distribution/Client/BuildReports/Storage.hs
@@ -119,8 +119,8 @@ storeLocal
 storeLocal cinfo templates reports platform =
   sequence_
     [ do
-      createDirectoryIfMissing True (takeDirectory file)
-      appendFile file output
+        createDirectoryIfMissing True (takeDirectory file)
+        appendFile file output
     | -- TODO: make this concurrency safe, either lock the report file or make
     --      sure the writes for each report are atomic
     (file, reports') <-
diff --git a/cabal-install/src/Distribution/Client/CmdErrorMessages.hs b/cabal-install/src/Distribution/Client/CmdErrorMessages.hs
index 8345d9e..d55da5d 100644
--- a/cabal-install/src/Distribution/Client/CmdErrorMessages.hs
+++ b/cabal-install/src/Distribution/Client/CmdErrorMessages.hs
@@ -332,15 +332,15 @@ renderTargetProblem verb _ (TargetProblemUnknownComponent pkgname ecname) =
     ++ verb
     ++ " the "
     ++ ( case ecname of
-          Left ucname -> "component " ++ prettyShow ucname
-          Right cname -> renderComponentName pkgname cname
+           Left ucname -> "component " ++ prettyShow ucname
+           Right cname -> renderComponentName pkgname cname
        )
     ++ " from the package "
     ++ prettyShow pkgname
     ++ ", because the package does not contain a "
     ++ ( case ecname of
-          Left _ -> "component"
-          Right cname -> renderComponentKind Singular (componentKind cname)
+           Left _ -> "component"
+           Right cname -> renderComponentKind Singular (componentKind cname)
        )
     ++ " with that name."
 renderTargetProblem verb _ (TargetProblemNoSuchPackage pkgid) =
@@ -381,58 +381,58 @@ renderTargetProblemNoneEnabled verb targetSelector targets =
     ++ " because none of the components are available to build: "
     ++ renderListSemiAnd
       [ case (status, mstanza) of
-        (TargetDisabledByUser, Just stanza) ->
-          renderListCommaAnd
-            [ "the " ++ showComponentName availableTargetComponentName
-            | AvailableTarget{availableTargetComponentName} <- targets'
-            ]
-            ++ plural (listPlural targets') " is " " are "
-            ++ " not available because building "
-            ++ renderOptionalStanza Plural stanza
-            ++ " has been disabled in the configuration"
-        (TargetDisabledBySolver, Just stanza) ->
-          renderListCommaAnd
-            [ "the " ++ showComponentName availableTargetComponentName
-            | AvailableTarget{availableTargetComponentName} <- targets'
-            ]
-            ++ plural (listPlural targets') " is " " are "
-            ++ "not available because the solver picked a plan that does not "
-            ++ "include the "
-            ++ renderOptionalStanza Plural stanza
-            ++ ", perhaps because no such plan exists. To see the error message "
-            ++ "explaining the problems with such plans, force the solver to "
-            ++ "include the "
-            ++ renderOptionalStanza Plural stanza
-            ++ " for all "
-            ++ "packages, by adding the line 'tests: True' to the "
-            ++ "'cabal.project.local' file."
-        (TargetNotBuildable, _) ->
-          renderListCommaAnd
-            [ "the " ++ showComponentName availableTargetComponentName
-            | AvailableTarget{availableTargetComponentName} <- targets'
-            ]
-            ++ plural (listPlural targets') " is " " are all "
-            ++ "marked as 'buildable: False'"
-        (TargetNotLocal, _) ->
-          renderListCommaAnd
-            [ "the " ++ showComponentName availableTargetComponentName
-            | AvailableTarget{availableTargetComponentName} <- targets'
-            ]
-            ++ " cannot be built because cabal does not currently support "
-            ++ "building test suites or benchmarks of non-local dependencies"
-        (TargetBuildable () TargetNotRequestedByDefault, Just stanza) ->
-          renderListCommaAnd
-            [ "the " ++ showComponentName availableTargetComponentName
-            | AvailableTarget{availableTargetComponentName} <- targets'
-            ]
-            ++ " will not be built because "
-            ++ renderOptionalStanza Plural stanza
-            ++ " are not built by default in the current configuration (but you "
-            ++ "can still build them specifically)" -- TODO: say how
-        _ ->
-          error $
-            "renderBuildTargetProblem: unexpected status "
-              ++ show (status, mstanza)
+          (TargetDisabledByUser, Just stanza) ->
+            renderListCommaAnd
+              [ "the " ++ showComponentName availableTargetComponentName
+              | AvailableTarget{availableTargetComponentName} <- targets'
+              ]
+              ++ plural (listPlural targets') " is " " are "
+              ++ " not available because building "
+              ++ renderOptionalStanza Plural stanza
+              ++ " has been disabled in the configuration"
+          (TargetDisabledBySolver, Just stanza) ->
+            renderListCommaAnd
+              [ "the " ++ showComponentName availableTargetComponentName
+              | AvailableTarget{availableTargetComponentName} <- targets'
+              ]
+              ++ plural (listPlural targets') " is " " are "
+              ++ "not available because the solver picked a plan that does not "
+              ++ "include the "
+              ++ renderOptionalStanza Plural stanza
+              ++ ", perhaps because no such plan exists. To see the error message "
+              ++ "explaining the problems with such plans, force the solver to "
+              ++ "include the "
+              ++ renderOptionalStanza Plural stanza
+              ++ " for all "
+              ++ "packages, by adding the line 'tests: True' to the "
+              ++ "'cabal.project.local' file."
+          (TargetNotBuildable, _) ->
+            renderListCommaAnd
+              [ "the " ++ showComponentName availableTargetComponentName
+              | AvailableTarget{availableTargetComponentName} <- targets'
+              ]
+              ++ plural (listPlural targets') " is " " are all "
+              ++ "marked as 'buildable: False'"
+          (TargetNotLocal, _) ->
+            renderListCommaAnd
+              [ "the " ++ showComponentName availableTargetComponentName
+              | AvailableTarget{availableTargetComponentName} <- targets'
+              ]
+              ++ " cannot be built because cabal does not currently support "
+              ++ "building test suites or benchmarks of non-local dependencies"
+          (TargetBuildable () TargetNotRequestedByDefault, Just stanza) ->
+            renderListCommaAnd
+              [ "the " ++ showComponentName availableTargetComponentName
+              | AvailableTarget{availableTargetComponentName} <- targets'
+              ]
+              ++ " will not be built because "
+              ++ renderOptionalStanza Plural stanza
+              ++ " are not built by default in the current configuration (but you "
+              ++ "can still build them specifically)" -- TODO: say how
+          _ ->
+            error $
+              "renderBuildTargetProblem: unexpected status "
+                ++ show (status, mstanza)
       | ((status, mstanza), targets') <- sortGroupOn groupingKey targets
       ]
   where
@@ -493,11 +493,11 @@ renderCannotPruneDependencies (CannotPruneDependencies brokenPackages) =
   "Cannot select only the dependencies (as requested by the "
     ++ "'--only-dependencies' flag), "
     ++ ( case pkgids of
-          [pkgid] -> "the package " ++ prettyShow pkgid ++ " is "
-          _ ->
-            "the packages "
-              ++ renderListCommaAnd (map prettyShow pkgids)
-              ++ " are "
+           [pkgid] -> "the package " ++ prettyShow pkgid ++ " is "
+           _ ->
+             "the packages "
+               ++ renderListCommaAnd (map prettyShow pkgids)
+               ++ " are "
        )
     ++ "required by a dependency of one of the other targets."
   where
diff --git a/cabal-install/src/Distribution/Client/CmdHaddockProject.hs b/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
index bde0948..bbcd060 100644
--- a/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
+++ b/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
@@ -287,7 +287,7 @@ haddockProjectAction flags _extraArgs globalFlags = do
                     interfacePath =
                       destDir
                         </> packageName
-                        <.> "haddock"
+                          <.> "haddock"
                 a <- doesDirectoryExist docDir
                 case a of
                   True ->
@@ -323,7 +323,7 @@ haddockProjectAction flags _extraArgs globalFlags = do
                     interfacePath =
                       destDir
                         </> packageName
-                        <.> "haddock"
+                          <.> "haddock"
                 a <- doesDirectoryExist docDir
                 case a of
                   True ->
diff --git a/cabal-install/src/Distribution/Client/CmdInstall.hs b/cabal-install/src/Distribution/Client/CmdInstall.hs
index be4f663..1cd8ef0 100644
--- a/cabal-install/src/Distribution/Client/CmdInstall.hs
+++ b/cabal-install/src/Distribution/Client/CmdInstall.hs
@@ -1284,7 +1284,7 @@ getLocalEnv :: FilePath -> Platform -> Version -> FilePath
 getLocalEnv dir platform compilerVersion =
   dir
     </> ".ghc.environment."
-    <> ghcPlatformAndVersionString platform compilerVersion
+      <> ghcPlatformAndVersionString platform compilerVersion
 
 getPackageDbStack
   :: Compiler
diff --git a/cabal-install/src/Distribution/Client/CmdListBin.hs b/cabal-install/src/Distribution/Client/CmdListBin.hs
index 1fefd3a..6ecd560 100644
--- a/cabal-install/src/Distribution/Client/CmdListBin.hs
+++ b/cabal-install/src/Distribution/Client/CmdListBin.hs
@@ -141,8 +141,7 @@ listbinAction flags@NixStyleFlags{..} args globalFlags = do
     (selectedUnitId, selectedComponent) <-
       -- Slight duplication with 'runProjectPreBuildPhase'.
       singleComponentOrElse
-        ( dieWithException verbosity ThisIsABug
-        )
+        (dieWithException verbosity ThisIsABug)
         $ targetsMap buildCtx
 
     printPlan verbosity baseCtx buildCtx
diff --git a/cabal-install/src/Distribution/Client/CmdPath.hs b/cabal-install/src/Distribution/Client/CmdPath.hs
index 8ca8d61..841b182 100644
--- a/cabal-install/src/Distribution/Client/CmdPath.hs
+++ b/cabal-install/src/Distribution/Client/CmdPath.hs
@@ -233,7 +233,6 @@ pathAction flags@NixStyleFlags{extraFlags = pathFlags', ..} cliTargetStrings glo
   let pathFlags =
         if pathCompiler pathFlags' == NoFlag && pathDirectories pathFlags' == NoFlag
           then -- if not a single key to query is given, query everything!
-
             pathFlags'
               { pathCompiler = Flag True
               , pathDirectories = Flag [minBound .. maxBound]
diff --git a/cabal-install/src/Distribution/Client/CmdRepl.hs b/cabal-install/src/Distribution/Client/CmdRepl.hs
index e243eb8..1c8806a 100644
--- a/cabal-install/src/Distribution/Client/CmdRepl.hs
+++ b/cabal-install/src/Distribution/Client/CmdRepl.hs
@@ -340,18 +340,18 @@ replAction flags@NixStyleFlags{extraFlags = r@ReplFlags{..}, ..} targetStrings g
         else -- Unfortunately, the best way to do this is to let the normal solver
         -- help us resolve the targets, but that isn't ideal for performance,
         -- especially in the no-project case.
-        withInstallPlan (lessVerbose verbosity) baseCtx' $ \elaboratedPlan sharedConfig -> do
-          -- targets should be non-empty map, but there's no NonEmptyMap yet.
-          targets <- validatedTargets (projectConfigShared (projectConfig ctx)) (pkgConfigCompiler sharedConfig) elaboratedPlan targetSelectors
+          withInstallPlan (lessVerbose verbosity) baseCtx' $ \elaboratedPlan sharedConfig -> do
+            -- targets should be non-empty map, but there's no NonEmptyMap yet.
+            targets <- validatedTargets (projectConfigShared (projectConfig ctx)) (pkgConfigCompiler sharedConfig) elaboratedPlan targetSelectors
 
-          let
-            (unitId, _) = fromMaybe (error "panic: targets should be non-empty") $ safeHead $ Map.toList targets
-            originalDeps = installedUnitId <$> InstallPlan.directDeps elaboratedPlan unitId
-            oci = OriginalComponentInfo unitId originalDeps
-            pkgId = fromMaybe (error $ "cannot find " ++ prettyShow unitId) $ packageId <$> InstallPlan.lookup elaboratedPlan unitId
-            baseCtx'' = addDepsToProjectTarget (envPackages replEnvFlags) pkgId baseCtx'
+            let
+              (unitId, _) = fromMaybe (error "panic: targets should be non-empty") $ safeHead $ Map.toList targets
+              originalDeps = installedUnitId <$> InstallPlan.directDeps elaboratedPlan unitId
+              oci = OriginalComponentInfo unitId originalDeps
+              pkgId = fromMaybe (error $ "cannot find " ++ prettyShow unitId) $ packageId <$> InstallPlan.lookup elaboratedPlan unitId
+              baseCtx'' = addDepsToProjectTarget (envPackages replEnvFlags) pkgId baseCtx'
 
-          return (Just oci, baseCtx'')
+            return (Just oci, baseCtx'')
 
     -- Now, we run the solver again with the added packages. While the graph
     -- won't actually reflect the addition of transitive dependencies,
@@ -780,14 +780,14 @@ renderReplProblem (TargetProblemMatchesMultiple decision targetSelector targets)
     ++ (if targetSelectorRefersToPkgs targetSelector then "includes " else "are ")
     ++ renderListSemiAnd
       [ "the "
-        ++ renderComponentKind Plural ckind
-        ++ " "
-        ++ renderListCommaAnd
-          [ maybe (prettyShow pkgname) prettyShow (componentNameString cname)
-          | t <- ts
-          , let cname = availableTargetComponentName t
-                pkgname = packageName (availableTargetPackageId t)
-          ]
+          ++ renderComponentKind Plural ckind
+          ++ " "
+          ++ renderListCommaAnd
+            [ maybe (prettyShow pkgname) prettyShow (componentNameString cname)
+            | t <- ts
+            , let cname = availableTargetComponentName t
+                  pkgname = packageName (availableTargetPackageId t)
+            ]
       | (ckind, ts) <- sortGroupOn availableTargetComponentKind targets
       ]
     ++ ".\n\n"
diff --git a/cabal-install/src/Distribution/Client/CmdRun.hs b/cabal-install/src/Distribution/Client/CmdRun.hs
index b390dac..f9dda70 100644
--- a/cabal-install/src/Distribution/Client/CmdRun.hs
+++ b/cabal-install/src/Distribution/Client/CmdRun.hs
@@ -247,8 +247,7 @@ runAction flags@NixStyleFlags{..} targetAndArgs globalFlags =
     (selectedUnitId, selectedComponent) <-
       -- Slight duplication with 'runProjectPreBuildPhase'.
       singleExeOrElse
-        ( dieWithException verbosity RunPhaseReached
-        )
+        (dieWithException verbosity RunPhaseReached)
         $ targetsMap buildCtx
 
     printPlan verbosity baseCtx buildCtx
@@ -305,10 +304,10 @@ runAction flags@NixStyleFlags{..} targetAndArgs globalFlags =
     let extraPath =
           elabExeDependencyPaths pkg
             ++ ( fromNubList
-                  . projectConfigProgPathExtra
-                  . projectConfigShared
-                  . projectConfig
-                  $ baseCtx
+                   . projectConfigProgPathExtra
+                   . projectConfigShared
+                   . projectConfig
+                   $ baseCtx
                )
 
     logExtraProgramSearchPath verbosity extraPath
diff --git a/cabal-install/src/Distribution/Client/CmdSdist.hs b/cabal-install/src/Distribution/Client/CmdSdist.hs
index a1142b0..019d815 100644
--- a/cabal-install/src/Distribution/Client/CmdSdist.hs
+++ b/cabal-install/src/Distribution/Client/CmdSdist.hs
@@ -246,9 +246,9 @@ sdistAction (pf@ProjectFlags{..}, SdistFlags{..}) targetStrings globalFlags = do
   let format :: OutputFormat
       format =
         if
-            | listSources, nulSeparated -> SourceList '\0'
-            | listSources -> SourceList '\n'
-            | otherwise -> TarGzArchive
+          | listSources, nulSeparated -> SourceList '\0'
+          | listSources -> SourceList '\n'
+          | otherwise -> TarGzArchive
 
       ext = case format of
         SourceList _ -> "list"
diff --git a/cabal-install/src/Distribution/Client/Config.hs b/cabal-install/src/Distribution/Client/Config.hs
index e522289..2ec3f08 100644
--- a/cabal-install/src/Distribution/Client/Config.hs
+++ b/cabal-install/src/Distribution/Client/Config.hs
@@ -1294,21 +1294,21 @@ configFieldDescriptions src =
       []
       []
     ++ [ viewAsFieldDescr $
-          optionDistPref
-            (configDistPref . savedConfigureFlags)
-            ( \distPref config ->
-                config
-                  { savedConfigureFlags =
-                      (savedConfigureFlags config)
-                        { configDistPref = distPref
-                        }
-                  , savedHaddockFlags =
-                      (savedHaddockFlags config)
-                        { haddockDistPref = distPref
-                        }
-                  }
-            )
-            ParseArgs
+           optionDistPref
+             (configDistPref . savedConfigureFlags)
+             ( \distPref config ->
+                 config
+                   { savedConfigureFlags =
+                       (savedConfigureFlags config)
+                         { configDistPref = distPref
+                         }
+                   , savedHaddockFlags =
+                       (savedHaddockFlags config)
+                         { haddockDistPref = distPref
+                         }
+                   }
+             )
+             ParseArgs
        ]
   where
     toSavedConfig lift options exclusions replacements =
diff --git a/cabal-install/src/Distribution/Client/Dependency.hs b/cabal-install/src/Distribution/Client/Dependency.hs
index 37e0cbd..3d4dc94 100644
--- a/cabal-install/src/Distribution/Client/Dependency.hs
+++ b/cabal-install/src/Distribution/Client/Dependency.hs
@@ -439,8 +439,8 @@ dontInstallNonReinstallablePackages params =
   where
     extraConstraints =
       [ LabeledPackageConstraint
-        (PackageConstraint (ScopeAnyQualifier pkgname) PackagePropertyInstalled)
-        ConstraintSourceNonReinstallablePackage
+          (PackageConstraint (ScopeAnyQualifier pkgname) PackagePropertyInstalled)
+          ConstraintSourceNonReinstallablePackage
       | pkgname <- nonReinstallablePackages
       ]
 
@@ -952,8 +952,8 @@ planPackagesProblems platform cinfo pkgs =
     ++ [ DuplicatePackageSolverId (Graph.nodeKey aDup) dups
        | dups <- duplicatesBy (comparing Graph.nodeKey) pkgs
        , aDup <- case dups of
-          [] -> []
-          (ad : _) -> [ad]
+           [] -> []
+           (ad : _) -> [ad]
        ]
 
 data PackageProblem
@@ -1010,11 +1010,11 @@ configuredPackageProblems
       ++ [ExtraFlag flag | OnlyInRight flag <- mergedFlags]
       ++ [ DuplicateDeps pkgs
          | pkgs <-
-            CD.nonSetupDeps
-              ( fmap
-                  (duplicatesBy (comparing packageName))
-                  specifiedDeps1
-              )
+             CD.nonSetupDeps
+               ( fmap
+                   (duplicatesBy (comparing packageName))
+                   specifiedDeps1
+               )
          ]
       ++ [MissingDep dep | OnlyInLeft dep <- mergedDeps]
       ++ [ExtraDep pkgid | OnlyInRight pkgid <- mergedDeps]
diff --git a/cabal-install/src/Distribution/Client/Errors.hs b/cabal-install/src/Distribution/Client/Errors.hs
index d25c59a..9be23b3 100644
--- a/cabal-install/src/Distribution/Client/Errors.hs
+++ b/cabal-install/src/Distribution/Client/Errors.hs
@@ -553,14 +553,14 @@ exceptionMessageCabalInstall e = case e of
   PackageNameAmbiguousErr ambiguities ->
     unlines
       [ "There is no package named '"
-        ++ prettyShow name
-        ++ "'. "
-        ++ ( if length matches > 1
-              then "However, the following package names exist: "
-              else "However, the following package name exists: "
-           )
-        ++ intercalate ", " ["'" ++ prettyShow m ++ "'" | m <- matches]
-        ++ "."
+          ++ prettyShow name
+          ++ "'. "
+          ++ ( if length matches > 1
+                 then "However, the following package names exist: "
+                 else "However, the following package name exists: "
+             )
+          ++ intercalate ", " ["'" ++ prettyShow m ++ "'" | m <- matches]
+          ++ "."
       | (name, matches) <- ambiguities
       ]
   ExtractTarballPackageErr err -> err
@@ -654,49 +654,49 @@ exceptionMessageCabalInstall e = case e of
   UnrecognisedTarget targets ->
     unlines
       [ "Unrecognised target '"
-        ++ target
-        ++ "'.\n"
-        ++ "Expected a "
-        ++ intercalate " or " expected
-        ++ ", rather than '"
-        ++ got
-        ++ "'."
+          ++ target
+          ++ "'.\n"
+          ++ "Expected a "
+          ++ intercalate " or " expected
+          ++ ", rather than '"
+          ++ got
+          ++ "'."
       | (target, expected, got) <- targets
       ]
   NoSuchTargetSelectorErr targets ->
     unlines
       [ "Unknown target '"
-        ++ target
-        ++ "'.\n"
-        ++ unlines
-          [ ( case inside of
-                Just (kind, "") ->
-                  "The " ++ kind ++ " has no "
-                Just (kind, thing) ->
-                  "The " ++ kind ++ " " ++ thing ++ " has no "
-                Nothing -> "There is no "
-            )
-            ++ intercalate
-              " or "
-              [ mungeThing thing ++ " '" ++ got ++ "'"
-              | (thing, got, _alts) <- nosuch'
-              ]
-            ++ "."
-            ++ if null alternatives
-              then ""
-              else
-                "\nPerhaps you meant "
-                  ++ intercalate
-                    ";\nor "
-                    [ "the " ++ thing ++ " '" ++ intercalate "' or '" alts ++ "'?"
-                    | (thing, alts) <- alternatives
-                    ]
-          | (inside, nosuch') <- groupByContainer nosuch
-          , let alternatives =
-                  [ (thing, alts)
-                  | (thing, _got, alts@(_ : _)) <- nosuch'
+          ++ target
+          ++ "'.\n"
+          ++ unlines
+            [ ( case inside of
+                  Just (kind, "") ->
+                    "The " ++ kind ++ " has no "
+                  Just (kind, thing) ->
+                    "The " ++ kind ++ " " ++ thing ++ " has no "
+                  Nothing -> "There is no "
+              )
+                ++ intercalate
+                  " or "
+                  [ mungeThing thing ++ " '" ++ got ++ "'"
+                  | (thing, got, _alts) <- nosuch'
                   ]
-          ]
+                ++ "."
+                ++ if null alternatives
+                  then ""
+                  else
+                    "\nPerhaps you meant "
+                      ++ intercalate
+                        ";\nor "
+                        [ "the " ++ thing ++ " '" ++ intercalate "' or '" alts ++ "'?"
+                        | (thing, alts) <- alternatives
+                        ]
+            | (inside, nosuch') <- groupByContainer nosuch
+            , let alternatives =
+                    [ (thing, alts)
+                    | (thing, _got, alts@(_ : _)) <- nosuch'
+                    ]
+            ]
       | (target, nosuch) <- targets
       , let groupByContainer =
               map
@@ -716,16 +716,16 @@ exceptionMessageCabalInstall e = case e of
   TargetSelectorAmbiguousErr targets ->
     unlines
       [ "Ambiguous target '"
-        ++ target
-        ++ "'. It could be:\n "
-        ++ unlines
-          [ "   "
-            ++ ut
-            ++ " ("
-            ++ bt
-            ++ ")"
-          | (ut, bt) <- amb
-          ]
+          ++ target
+          ++ "'. It could be:\n "
+          ++ unlines
+            [ "   "
+                ++ ut
+                ++ " ("
+                ++ bt
+                ++ ")"
+            | (ut, bt) <- amb
+            ]
       | (target, amb) <- targets
       ]
   TargetSelectorNoCurrentPackageErr target ->
@@ -772,11 +772,11 @@ exceptionMessageCabalInstall e = case e of
       ++ "be unambiguous but matches the following targets:\n"
       ++ unlines
         [ "'"
-          ++ rendering
-          ++ "', matching:"
-          ++ concatMap
-            ("\n  - " ++)
-            matches
+            ++ rendering
+            ++ "', matching:"
+            ++ concatMap
+              ("\n  - " ++)
+              matches
         | (rendering, matches) <- renderingsAndMatches
         ]
       ++ "\nNote: Cabal expects to be able to make a single fully "
diff --git a/cabal-install/src/Distribution/Client/Fetch.hs b/cabal-install/src/Distribution/Client/Fetch.hs
index 54db5ae..863472a 100644
--- a/cabal-install/src/Distribution/Client/Fetch.hs
+++ b/cabal-install/src/Distribution/Client/Fetch.hs
@@ -138,7 +138,6 @@ fetch
       then -- TODO: when we add support for remote tarballs then this message
       -- will need to be changed because for remote tarballs we fetch them
       -- at the earlier phase.
-
         notice verbosity $
           "No packages need to be fetched. "
             ++ "All the requested packages are already local "
diff --git a/cabal-install/src/Distribution/Client/FetchUtils.hs b/cabal-install/src/Distribution/Client/FetchUtils.hs
index c804040..6da960d 100644
--- a/cabal-install/src/Distribution/Client/FetchUtils.hs
+++ b/cabal-install/src/Distribution/Client/FetchUtils.hs
@@ -312,8 +312,8 @@ asyncFetchPackages verbosity repoCtxt pkglocs body = do
   asyncDownloadVars <-
     sequenceA
       [ do
-        v <- newEmptyMVar
-        return (pkgloc, v)
+          v <- newEmptyMVar
+          return (pkgloc, v)
       | pkgloc <- pkglocs
       ]
 
@@ -369,7 +369,7 @@ packageFile :: Repo -> PackageId -> FilePath
 packageFile repo pkgid =
   packageDir repo pkgid
     </> prettyShow pkgid
-    <.> "tar.gz"
+      <.> "tar.gz"
 
 -- | Generate the full path to the directory where the local cached copy of
 -- the tarball for a given @PackageIdentifier@ is stored.
diff --git a/cabal-install/src/Distribution/Client/FileMonitor.hs b/cabal-install/src/Distribution/Client/FileMonitor.hs
index 084545d..dffc26a 100644
--- a/cabal-install/src/Distribution/Client/FileMonitor.hs
+++ b/cabal-install/src/Distribution/Client/FileMonitor.hs
@@ -678,14 +678,14 @@ probeMonitorStateGlobRel
         children' <-
           sequence
             [ do
-              fstate' <-
-                probeMonitorStateGlobRel
-                  kindfile
-                  kinddir
-                  root
-                  (dirName </> fname)
-                  fstate
-              return (fname, fstate')
+                fstate' <-
+                  probeMonitorStateGlobRel
+                    kindfile
+                    kinddir
+                    root
+                    (dirName </> fname)
+                    fstate
+                return (fname, fstate')
             | (fname, fstate) <- children
             ]
         return $! MonitorStateGlobDirs glob globPath mtime children'
diff --git a/cabal-install/src/Distribution/Client/Get.hs b/cabal-install/src/Distribution/Client/Get.hs
index 39ace2f..a781f56 100644
--- a/cabal-install/src/Distribution/Client/Get.hs
+++ b/cabal-install/src/Distribution/Client/Get.hs
@@ -366,14 +366,14 @@ clonePackagesFromSourceRepo
     -- Now execute all the required commands for each repo
     sequence_
       [ cloneSourceRepo verbosity vcs' repo destDir
-        `catch` \exitcode ->
-          throwIO
-            ( ClonePackageFailedWithExitCode
-                pkgid
-                (srpToProxy repo)
-                (programName (vcsProgram vcs))
-                exitcode
-            )
+          `catch` \exitcode ->
+            throwIO
+              ( ClonePackageFailedWithExitCode
+                  pkgid
+                  (srpToProxy repo)
+                  (programName (vcsProgram vcs))
+                  exitcode
+              )
       | (pkgid, repo, vcs, destDir) <- pkgrepos'
       , let vcs' = Map.findWithDefault (error $ "Cannot configure " ++ prettyShow (vcsRepoType vcs)) (vcsRepoType vcs) vcss
       ]
diff --git a/cabal-install/src/Distribution/Client/HttpUtils.hs b/cabal-install/src/Distribution/Client/HttpUtils.hs
index 72ba34d..bc4d7e5 100644
--- a/cabal-install/src/Distribution/Client/HttpUtils.hs
+++ b/cabal-install/src/Distribution/Client/HttpUtils.hs
@@ -182,12 +182,12 @@ downloadURI transport verbosity uri path = do
         Left err ->
           dieWithException verbosity $ CannotParseURIFragment uriFrag err
       else -- if there are no uri fragment, use ETag
-      do
-        etagPathExists <- doesFileExist etagPath
-        -- In rare cases the target file doesn't exist, but the etag does.
-        if targetExists && etagPathExists
-          then return (CheckETag etagPath)
-          else return (NeedsDownload Nothing)
+        do
+          etagPathExists <- doesFileExist etagPath
+          -- In rare cases the target file doesn't exist, but the etag does.
+          if targetExists && etagPathExists
+            then return (CheckETag etagPath)
+            else return (NeedsDownload Nothing)
 
   -- Only use the external http transports if we actually have to
   -- (or have been told to do so)
@@ -1040,8 +1040,7 @@ plainHttpTransport =
       p <- fixupEmptyProxy <$> fetchProxy True
       Exception.handleJust
         (guard . isDoesNotExistError)
-        ( const . dieWithException verbosity $ Couldn'tEstablishHttpConnection
-        )
+        (const . dieWithException verbosity $ Couldn'tEstablishHttpConnection)
         $ browse
         $ do
           setProxy p
diff --git a/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs b/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
index 1e08e84..4779812 100644
--- a/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
+++ b/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
@@ -467,11 +467,11 @@ languagePrompt flags pkgType = getLanguage flags $ do
       True
 
   if
-      | l == h2010 -> return Haskell2010
-      | l == h98 -> return Haskell98
-      | l == ghc2021 -> return GHC2021
-      | l == ghc2024 -> return GHC2024
-      | otherwise -> return $ UnknownLanguage l
+    | l == h2010 -> return Haskell2010
+    | l == h98 -> return Haskell98
+    | l == ghc2021 -> return GHC2021
+    | l == ghc2024 -> return GHC2024
+    | otherwise -> return $ UnknownLanguage l
 
 noCommentsPrompt :: Interactive m => InitFlags -> m Bool
 noCommentsPrompt flags = getNoComments flags $ do
diff --git a/cabal-install/src/Distribution/Client/Install.hs b/cabal-install/src/Distribution/Client/Install.hs
index e1f855c..2c42220 100644
--- a/cabal-install/src/Distribution/Client/Install.hs
+++ b/cabal-install/src/Distribution/Client/Install.hs
@@ -693,11 +693,11 @@ pruneInstallPlan pkgSpecifiers =
       "Cannot select only the dependencies (as requested by the "
         ++ "'--only-dependencies' flag), "
         ++ ( case pkgids of
-              [pkgid] -> "the package " ++ prettyShow pkgid ++ " is "
-              _ ->
-                "the packages "
-                  ++ intercalate ", " (map prettyShow pkgids)
-                  ++ " are "
+               [pkgid] -> "the package " ++ prettyShow pkgid ++ " is "
+               _ ->
+                 "the packages "
+                   ++ intercalate ", " (map prettyShow pkgids)
+                   ++ " are "
            )
         ++ "required by a dependency of one of the other targets."
       where
@@ -1185,16 +1185,16 @@ storeDetailedBuildReports
 storeDetailedBuildReports verbosity logsDir reports =
   sequence_
     [ do
-      allReportsDir <- defaultReportsDir
-      let logFileName = prettyShow (BuildReports.package report) <.> "log"
-          logFile = logsDir </> logFileName
-          reportsDir = allReportsDir </> unRepoName (remoteRepoName remoteRepo)
-          reportFile = reportsDir </> logFileName
+        allReportsDir <- defaultReportsDir
+        let logFileName = prettyShow (BuildReports.package report) <.> "log"
+            logFile = logsDir </> logFileName
+            reportsDir = allReportsDir </> unRepoName (remoteRepoName remoteRepo)
+            reportFile = reportsDir </> logFileName
 
-      handleMissingLogFile $ do
-        buildLog <- readFile logFile
-        createDirectoryIfMissing True reportsDir -- FIXME
-        writeFile reportFile (show (showBuildReport report, buildLog))
+        handleMissingLogFile $ do
+          buildLog <- readFile logFile
+          createDirectoryIfMissing True reportsDir -- FIXME
+          writeFile reportFile (show (showBuildReport report, buildLog))
     | (report, Just repo) <- reports
     , Just remoteRepo <- [maybeRepoRemote repo]
     , isLikelyToHaveLogFile (BuildReports.installOutcome report)
@@ -1750,7 +1750,7 @@ installLocalTarballPackage
             descFilePath =
               absUnpackedPath
                 </> prettyShow (packageName pkgid)
-                <.> "cabal"
+                  <.> "cabal"
         info verbosity $
           "Extracting "
             ++ tarballPath
@@ -1847,7 +1847,7 @@ installUnpackedPackage
         let descFilePath =
               fromMaybe "." workingDir
                 </> prettyShow (packageName pkgid)
-                <.> "cabal"
+                  <.> "cabal"
         info verbosity $
           "Updating "
             ++ prettyShow (packageName pkgid) <.> "cabal"
@@ -2020,7 +2020,6 @@ installUnpackedPackage
               if is_dir
                 then -- Sort so that each prefix of the package
                 -- configurations is well formed
-
                   traverse (readPkgConf pkgConfDest) . sort . filter notHidden
                     =<< getDirectoryContents pkgConfDest
                 else fmap (: []) $ readPkgConf "." pkgConfDest
diff --git a/cabal-install/src/Distribution/Client/InstallPlan.hs b/cabal-install/src/Distribution/Client/InstallPlan.hs
index 46212ba..87cae44 100644
--- a/cabal-install/src/Distribution/Client/InstallPlan.hs
+++ b/cabal-install/src/Distribution/Client/InstallPlan.hs
@@ -240,7 +240,7 @@ instance
 instance
   (HasUnitId ipkg, HasUnitId srcpkg)
   => HasUnitId
-      (GenericPlanPackage ipkg srcpkg)
+       (GenericPlanPackage ipkg srcpkg)
   where
   installedUnitId (PreExisting ipkg) = installedUnitId ipkg
   installedUnitId (Configured spkg) = installedUnitId spkg
@@ -826,10 +826,10 @@ processingInvariant plan (Processing processingSet completedSet failedSet) =
     assert
       ( and
           [ case Graph.lookup pkgid (planGraph plan) of
-            Just (Configured _) -> True
-            Just (PreExisting _) -> False
-            Just (Installed _) -> False
-            Nothing -> False
+              Just (Configured _) -> True
+              Just (PreExisting _) -> False
+              Just (Installed _) -> False
+              Nothing -> False
           | pkgid <- Set.toList processingSet ++ Set.toList failedSet
           ]
       )
@@ -950,8 +950,8 @@ execute jobCtl keepGoing depFailure plan installPkg =
           do
             sequence_
               [ spawnJob jobCtl $ do
-                result <- installPkg pkg
-                return (nodeKey pkg, result)
+                  result <- installPkg pkg
+                  return (nodeKey pkg, result)
               | pkg <- newpkgs
               ]
             waitForTasks results tasksFailed processing
@@ -1052,11 +1052,11 @@ problems
   -> [PlanProblem ipkg srcpkg]
 problems graph =
   [ PackageMissingDeps
-    pkg
-    ( mapMaybe
-        (fmap nodeKey . flip Graph.lookup graph)
-        missingDeps
-    )
+      pkg
+      ( mapMaybe
+          (fmap nodeKey . flip Graph.lookup graph)
+          missingDeps
+      )
   | (pkg, missingDeps) <- Graph.broken graph
   ]
     ++ [ PackageCycle cycleGroup
@@ -1071,9 +1071,9 @@ problems graph =
     ++ [ PackageStateInvalid pkg pkg'
        | pkg <- Foldable.toList graph
        , Just pkg' <-
-          map
-            (flip Graph.lookup graph)
-            (nodeNeighbors pkg)
+           map
+             (flip Graph.lookup graph)
+             (nodeNeighbors pkg)
        , not (stateDependencyRelation pkg pkg')
        ]
 
diff --git a/cabal-install/src/Distribution/Client/InstallSymlink.hs b/cabal-install/src/Distribution/Client/InstallSymlink.hs
index 13e29a4..0f86534 100644
--- a/cabal-install/src/Distribution/Client/InstallSymlink.hs
+++ b/cabal-install/src/Distribution/Client/InstallSymlink.hs
@@ -151,26 +151,26 @@ symlinkBinaries
             fmap catMaybes $
               sequenceA
                 [ do
-                  privateBinDir <- pkgBinDir pkg ipid
-                  ok <-
-                    symlinkBinary
-                      ( Symlink
-                          overwritePolicy
-                          publicBinDir
-                          privateBinDir
-                          (prettyShow publicExeName)
-                          privateExeName
-                      )
-                  if ok
-                    then return Nothing
-                    else
-                      return
-                        ( Just
-                            ( pkgid
-                            , publicExeName
-                            , privateBinDir </> privateExeName
-                            )
+                    privateBinDir <- pkgBinDir pkg ipid
+                    ok <-
+                      symlinkBinary
+                        ( Symlink
+                            overwritePolicy
+                            publicBinDir
+                            privateBinDir
+                            (prettyShow publicExeName)
+                            privateExeName
                         )
+                    if ok
+                      then return Nothing
+                      else
+                        return
+                          ( Just
+                              ( pkgid
+                              , publicExeName
+                              , privateBinDir </> privateExeName
+                              )
+                          )
                 | (rpkg, pkg, exe) <- exes
                 , let pkgid = packageId pkg
                       -- This is a bit dodgy; probably won't work for Backpack packages
diff --git a/cabal-install/src/Distribution/Client/List.hs b/cabal-install/src/Distribution/Client/List.hs
index b032110..4efff16 100644
--- a/cabal-install/src/Distribution/Client/List.hs
+++ b/cabal-install/src/Distribution/Client/List.hs
@@ -185,11 +185,11 @@ getPkgList verbosity packageDBs repoCtxt mcompprogdb listFlags pats = do
       matches :: [PackageDisplayInfo]
       matches =
         [ mergePackageInfo
-          pref
-          installedPkgs
-          sourcePkgs
-          selectedPkg
-          False
+            pref
+            installedPkgs
+            sourcePkgs
+            selectedPkg
+            False
         | (pkgname, installedPkgs, sourcePkgs) <- pkgsInfo
         , not onlyInstalled || not (null installedPkgs)
         , let pref = prefs pkgname
@@ -239,7 +239,6 @@ list verbosity packageDBs repos mcompProgdb listFlags pats = do
     else -- Note: this only works because for 'list', one cannot currently
     -- specify any version constraints, so listing all installed
     -- and source ones works.
-
       if null matches
         then notice verbosity "No matches found."
         else putStr $ unlines (map showPackageSummaryInfo matches)
@@ -297,14 +296,14 @@ info
     pkgsinfo <-
       sequenceA
         [ do
-          pkginfo <-
-            either (dieWithException verbosity) return $
-              gatherPkgInfo
-                prefs
-                installedPkgIndex
-                sourcePkgIndex
-                pkgSpecifier
-          updateFileSystemPackageDetails pkginfo
+            pkginfo <-
+              either (dieWithException verbosity) return $
+                gatherPkgInfo
+                  prefs
+                  installedPkgIndex
+                  sourcePkgIndex
+                  pkgSpecifier
+            updateFileSystemPackageDetails pkginfo
         | pkgSpecifier <- pkgSpecifiers
         ]
 
@@ -461,9 +460,9 @@ showPackageDetailedInfo pkginfo =
   renderStyle (style{lineLength = 80, ribbonsPerLine = 1}) $
     char '*'
       <+> pretty (pkgName pkginfo)
-        <<>> maybe Disp.empty (\v -> char '-' Disp.<> pretty v) (selectedVersion pkginfo)
+      <<>> maybe Disp.empty (\v -> char '-' Disp.<> pretty v) (selectedVersion pkginfo)
       <+> text (replicate (16 - length (prettyShow (pkgName pkginfo))) ' ')
-        <<>> parens pkgkind
+      <<>> parens pkgkind
       $+$ nest
         4
         ( vcat
diff --git a/cabal-install/src/Distribution/Client/Main.hs b/cabal-install/src/Distribution/Client/Main.hs
index 5959753..834545a 100644
--- a/cabal-install/src/Distribution/Client/Main.hs
+++ b/cabal-install/src/Distribution/Client/Main.hs
@@ -1196,8 +1196,8 @@ uploadAction uploadFlags extraArgs globalFlags = do
       | otherwise =
           sequence_
             [ do
-              exists <- doesFileExist tarfile
-              unless exists $ dieWithException verbosity $ FileNotFound tarfile
+                exists <- doesFileExist tarfile
+                unless exists $ dieWithException verbosity $ FileNotFound tarfile
             | tarfile <- tarfiles
             ]
       where
diff --git a/cabal-install/src/Distribution/Client/ParseUtils.hs b/cabal-install/src/Distribution/Client/ParseUtils.hs
index 44cdc4c..f79c10d 100644
--- a/cabal-install/src/Distribution/Client/ParseUtils.hs
+++ b/cabal-install/src/Distribution/Client/ParseUtils.hs
@@ -126,7 +126,8 @@ commandOptionsToFields = map viewAsFieldDescr
 
 -- | The description of a section in a config file. It can contain both
 -- fields and optionally further subsections. See also 'FieldDescr'.
-data SectionDescr a = forall b.
+data SectionDescr a
+  = forall b.
   SectionDescr
   { sectionName :: String
   , sectionFields :: [FieldDescr b]
@@ -137,7 +138,8 @@ data SectionDescr a = forall b.
   }
 
 -- | 'FieldGrammar' section description
-data FGSectionDescr g a = forall s.
+data FGSectionDescr g a
+  = forall s.
   FGSectionDescr
   { fgSectionName :: String
   , fgSectionGrammar :: g s s
@@ -211,8 +213,8 @@ ppField name mdef cur
         ( \def ->
             Disp.text "--"
               <+> Disp.text name
-                Disp.<> Disp.colon
-              <+> def
+              Disp.<> Disp.colon
+                <+> def
         )
         mdef
   | otherwise = Disp.text name Disp.<> Disp.colon <+> cur
diff --git a/cabal-install/src/Distribution/Client/ProjectBuilding.hs b/cabal-install/src/Distribution/Client/ProjectBuilding.hs
index a090668..b24e14b 100644
--- a/cabal-install/src/Distribution/Client/ProjectBuilding.hs
+++ b/cabal-install/src/Distribution/Client/ProjectBuilding.hs
@@ -798,7 +798,7 @@ unpackPackageTarball verbosity tarball parentdir pkgid pkgTextOverride =
       parentdir
         </> pkgsubdir
         </> prettyShow pkgname
-        <.> "cabal"
+          <.> "cabal"
     pkgsubdir = prettyShow pkgid
     pkgname = packageName pkgid
 
diff --git a/cabal-install/src/Distribution/Client/ProjectConfig.hs b/cabal-install/src/Distribution/Client/ProjectConfig.hs
index a80f517..ff0e381 100644
--- a/cabal-install/src/Distribution/Client/ProjectConfig.hs
+++ b/cabal-install/src/Distribution/Client/ProjectConfig.hs
@@ -444,12 +444,12 @@ resolveBuildTimeSettings
       --
       buildSettingLogFile
         :: Maybe
-            ( Compiler
-              -> Platform
-              -> PackageId
-              -> UnitId
-              -> FilePath
-            )
+             ( Compiler
+               -> Platform
+               -> PackageId
+               -> UnitId
+               -> FilePath
+             )
       buildSettingLogFile
         | useDefaultTemplate = Just (substLogFileName defaultTemplate)
         | otherwise = fmap substLogFileName givenTemplate
@@ -459,7 +459,7 @@ resolveBuildTimeSettings
           cabalLogsDirectory
             </> "$compiler"
             </> "$libname"
-            <.> "log"
+              <.> "log"
       givenTemplate = flagToMaybe projectConfigLogFile
 
       useDefaultTemplate
@@ -1071,10 +1071,10 @@ findProjectPackages
       checkFilePackageMatch
         :: String
         -> Rebuild
-            ( Either
-                BadPackageLocationMatch
-                ProjectPackageLocation
-            )
+             ( Either
+                 BadPackageLocationMatch
+                 ProjectPackageLocation
+             )
       checkFilePackageMatch pkglocstr = do
         -- The pkglocstr may be absolute or may be relative to the project root.
         -- Either way, </> does the right thing here. We return relative paths if
@@ -1184,10 +1184,10 @@ fetchAndReadSourcePackages
             preferredHttpTransport
       sequenceA
         [ fetchAndReadSourcePackageRemoteTarball
-          verbosity
-          distDirLayout
-          getTransport
-          uri
+            verbosity
+            distDirLayout
+            getTransport
+            uri
         | ProjectPackageRemoteTarball uri <- pkgLocations
         ]
 
@@ -1329,8 +1329,8 @@ syncAndReadSourcePackagesRemoteRepos
     -- instance. So same location but can differ in commit/tag/branch/subdir.
     let reposByLocation
           :: Map
-              (RepoType, String)
-              [(SourceRepoList, RepoType)]
+               (RepoType, String)
+               [(SourceRepoList, RepoType)]
         reposByLocation =
           Map.fromListWith
             (++)
@@ -1346,8 +1346,8 @@ syncAndReadSourcePackagesRemoteRepos
     concat
       <$> sequenceA
         [ rerunIfChanged verbosity monitor repoGroup' $ do
-          vcs' <- getConfiguredVCS repoType
-          syncRepoGroupAndReadSourcePackages vcs' pathStem repoGroup'
+            vcs' <- getConfiguredVCS repoType
+            syncRepoGroupAndReadSourcePackages vcs' pathStem repoGroup'
         | repoGroup@((primaryRepo, repoType) : _) <- Map.elems reposByLocation
         , let repoGroup' = map fst repoGroup
               pathStem =
@@ -1355,8 +1355,8 @@ syncAndReadSourcePackagesRemoteRepos
                   </> localFileNameForRemoteRepo primaryRepo
               monitor
                 :: FileMonitor
-                    [SourceRepoList]
-                    [PackageSpecifier (SourcePackage UnresolvedPkgLoc)]
+                     [SourceRepoList]
+                     [PackageSpecifier (SourcePackage UnresolvedPkgLoc)]
               monitor = newFileMonitor (pathStem <.> "cache")
         ]
     where
@@ -1555,11 +1555,11 @@ extractTarballPackageCabalFilePure
   :: FilePath
   -> LBS.ByteString
   -> Either
-      ( Either
-          Tar.FormatError
-          CabalFileSearchFailure
-      )
-      (FilePath, LBS.ByteString)
+       ( Either
+           Tar.FormatError
+           CabalFileSearchFailure
+       )
+       (FilePath, LBS.ByteString)
 extractTarballPackageCabalFilePure tarballFile =
   check
     . accumEntryMap
diff --git a/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs b/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
index 3c9253c..f2e20c0 100644
--- a/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
+++ b/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
@@ -213,9 +213,9 @@ instantiateProjectConfigSkeletonWithCompiler os arch impl _flags skel = go $ map
   where
     go
       :: CondTree
-          FlagName
-          [ProjectConfigPath]
-          ProjectConfig
+           FlagName
+           [ProjectConfigPath]
+           ProjectConfig
       -> ProjectConfig
     go (CondNode l _imps ts) =
       let branches = concatMap processBranch ts
@@ -1565,91 +1565,91 @@ legacyPackageConfigFieldDescrs =
       , overrideFieldDebugInfo
       ]
     ++ ( liftFields
-          legacyInstallPkgFlags
-          (\flags conf -> conf{legacyInstallPkgFlags = flags})
-          . filterFields
-            [ "documentation"
-            , "run-tests"
-            ]
-          . commandOptionsToFields
+           legacyInstallPkgFlags
+           (\flags conf -> conf{legacyInstallPkgFlags = flags})
+           . filterFields
+             [ "documentation"
+             , "run-tests"
+             ]
+           . commandOptionsToFields
        )
       (installOptions ParseArgs)
     ++ ( liftFields
-          legacyHaddockFlags
-          (\flags conf -> conf{legacyHaddockFlags = flags})
-          . mapFieldNames
-            ("haddock-" ++)
-          . addFields
-            [ simpleFieldParsec
-                "for-hackage"
-                -- TODO: turn this into a library function
-                (fromFlagOrDefault Disp.empty . fmap pretty)
-                (toFlag <$> parsec <|> pure mempty)
-                haddockForHackage
-                (\v conf -> conf{haddockForHackage = v})
-            ]
-          . filterFields
-            [ "hoogle"
-            , "html"
-            , "html-location"
-            , "foreign-libraries"
-            , "executables"
-            , "tests"
-            , "benchmarks"
-            , "all"
-            , "internal"
-            , "css"
-            , "hyperlink-source"
-            , "quickjump"
-            , "hscolour-css"
-            , "contents-location"
-            , "index-location"
-            , "keep-temp-files"
-            , "base-url"
-            , "lib"
-            , "output-dir"
-            ]
-          . commandOptionsToFields
+           legacyHaddockFlags
+           (\flags conf -> conf{legacyHaddockFlags = flags})
+           . mapFieldNames
+             ("haddock-" ++)
+           . addFields
+             [ simpleFieldParsec
+                 "for-hackage"
+                 -- TODO: turn this into a library function
+                 (fromFlagOrDefault Disp.empty . fmap pretty)
+                 (toFlag <$> parsec <|> pure mempty)
+                 haddockForHackage
+                 (\v conf -> conf{haddockForHackage = v})
+             ]
+           . filterFields
+             [ "hoogle"
+             , "html"
+             , "html-location"
+             , "foreign-libraries"
+             , "executables"
+             , "tests"
+             , "benchmarks"
+             , "all"
+             , "internal"
+             , "css"
+             , "hyperlink-source"
+             , "quickjump"
+             , "hscolour-css"
+             , "contents-location"
+             , "index-location"
+             , "keep-temp-files"
+             , "base-url"
+             , "lib"
+             , "output-dir"
+             ]
+           . commandOptionsToFields
        )
       (haddockOptions ParseArgs)
     ++ ( liftFields
-          legacyTestFlags
-          (\flags conf -> conf{legacyTestFlags = flags})
-          . mapFieldNames
-            prefixTest
-          . addFields
-            [ newLineListField
-                "test-options"
-                (showTokenQ . fromPathTemplate)
-                (fmap toPathTemplate parseTokenQ)
-                testOptions
-                (\v conf -> conf{testOptions = v})
-            ]
-          . filterFields
-            [ "log"
-            , "machine-log"
-            , "show-details"
-            , "keep-tix-files"
-            , "fail-when-no-test-suites"
-            , "test-wrapper"
-            ]
-          . commandOptionsToFields
+           legacyTestFlags
+           (\flags conf -> conf{legacyTestFlags = flags})
+           . mapFieldNames
+             prefixTest
+           . addFields
+             [ newLineListField
+                 "test-options"
+                 (showTokenQ . fromPathTemplate)
+                 (fmap toPathTemplate parseTokenQ)
+                 testOptions
+                 (\v conf -> conf{testOptions = v})
+             ]
+           . filterFields
+             [ "log"
+             , "machine-log"
+             , "show-details"
+             , "keep-tix-files"
+             , "fail-when-no-test-suites"
+             , "test-wrapper"
+             ]
+           . commandOptionsToFields
        )
       (testOptions' ParseArgs)
     ++ ( liftFields
-          legacyBenchmarkFlags
-          (\flags conf -> conf{legacyBenchmarkFlags = flags})
-          . addFields
-            [ newLineListField
-                "benchmark-options"
-                (showTokenQ . fromPathTemplate)
-                (fmap toPathTemplate parseTokenQ)
-                benchmarkOptions
-                (\v conf -> conf{benchmarkOptions = v})
-            ]
-          . filterFields
-            []
-          . commandOptionsToFields
+           legacyBenchmarkFlags
+           (\flags conf -> conf{legacyBenchmarkFlags = flags})
+           . addFields
+             [ newLineListField
+                 "benchmark-options"
+                 (showTokenQ . fromPathTemplate)
+                 (fmap toPathTemplate parseTokenQ)
+                 benchmarkOptions
+                 (\v conf -> conf{benchmarkOptions = v})
+             ]
+           . filterFields
+             []
+           . commandOptionsToFields
        )
       (benchmarkOptions' ParseArgs)
   where
diff --git a/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs b/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
index 3e8e3ba..838907d 100644
--- a/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
+++ b/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
@@ -457,12 +457,12 @@ data BuildTimeSettings = BuildTimeSettings
   , buildSettingSummaryFile :: [PathTemplate]
   , buildSettingLogFile
       :: Maybe
-          ( Compiler
-            -> Platform
-            -> PackageId
-            -> UnitId
-            -> FilePath
-          )
+           ( Compiler
+             -> Platform
+             -> PackageId
+             -> UnitId
+             -> FilePath
+           )
   , buildSettingLogVerbosity :: Verbosity
   , buildSettingBuildReports :: ReportLevel
   , buildSettingReportPlanningFailure :: Bool
diff --git a/cabal-install/src/Distribution/Client/ProjectOrchestration.hs b/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
index c3fa259..b3730f0 100644
--- a/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
+++ b/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
@@ -764,8 +764,8 @@ availableTargetIndexes installPlan = AvailableTargetIndexes{..}
   where
     availableTargetsByPackageIdAndComponentName
       :: Map
-          (PackageId, ComponentName)
-          [AvailableTarget (UnitId, ComponentName)]
+           (PackageId, ComponentName)
+           [AvailableTarget (UnitId, ComponentName)]
     availableTargetsByPackageIdAndComponentName =
       availableTargets installPlan
 
@@ -788,8 +788,8 @@ availableTargetIndexes installPlan = AvailableTargetIndexes{..}
 
     availableTargetsByPackageNameAndComponentName
       :: Map
-          (PackageName, ComponentName)
-          [AvailableTarget (UnitId, ComponentName)]
+           (PackageName, ComponentName)
+           [AvailableTarget (UnitId, ComponentName)]
     availableTargetsByPackageNameAndComponentName =
       Map.mapKeysWith
         (++)
@@ -798,8 +798,8 @@ availableTargetIndexes installPlan = AvailableTargetIndexes{..}
 
     availableTargetsByPackageNameAndUnqualComponentName
       :: Map
-          (PackageName, UnqualComponentName)
-          [AvailableTarget (UnitId, ComponentName)]
+           (PackageName, UnqualComponentName)
+           [AvailableTarget (UnitId, ComponentName)]
     availableTargetsByPackageNameAndUnqualComponentName =
       Map.mapKeysWith
         (++)
@@ -1107,10 +1107,10 @@ printPlan
             [ "-w " ++ (showCompilerId . pkgConfigCompiler) elaboratedShared
             , "-O"
                 ++ ( case globalOptimization <> localOptimization of -- if local is not set, read global
-                      Setup.Flag NoOptimisation -> "0"
-                      Setup.Flag NormalOptimisation -> "1"
-                      Setup.Flag MaximumOptimisation -> "2"
-                      Setup.NoFlag -> "1"
+                       Setup.Flag NoOptimisation -> "0"
+                       Setup.Flag NormalOptimisation -> "1"
+                       Setup.Flag MaximumOptimisation -> "2"
+                       Setup.NoFlag -> "1"
                    )
             ]
           ++ "\n"
@@ -1180,13 +1180,13 @@ dieOnBuildFailures verbosity currentCommand plan buildOutcomes
       -- For failures where we have a build log, print the log plus a header
       sequence_
         [ do
-          notice verbosity $
-            '\n'
-              : renderFailureDetail False pkg reason
-              ++ "\nBuild log ( "
-              ++ logfile
-              ++ " ):"
-          readFile logfile >>= noticeNoWrap verbosity
+            notice verbosity $
+              '\n'
+                : renderFailureDetail False pkg reason
+                ++ "\nBuild log ( "
+                ++ logfile
+                ++ " ):"
+            readFile logfile >>= noticeNoWrap verbosity
         | (pkg, ShowBuildSummaryAndLog reason logfile) <-
             failuresClassification
         ]
@@ -1196,14 +1196,14 @@ dieOnBuildFailures verbosity currentCommand plan buildOutcomes
       dieIfNotHaddockFailure verbosity $
         unlines
           [ case failureClassification of
-            ShowBuildSummaryAndLog reason _
-              | verbosity > normal ->
-                  renderFailureDetail mentionDepOf pkg reason
-              | otherwise ->
-                  renderFailureSummary mentionDepOf pkg reason
-                    ++ ". See the build log above for details."
-            ShowBuildSummaryOnly reason ->
-              renderFailureDetail mentionDepOf pkg reason
+              ShowBuildSummaryAndLog reason _
+                | verbosity > normal ->
+                    renderFailureDetail mentionDepOf pkg reason
+                | otherwise ->
+                    renderFailureSummary mentionDepOf pkg reason
+                      ++ ". See the build log above for details."
+              ShowBuildSummaryOnly reason ->
+                renderFailureDetail mentionDepOf pkg reason
           | let mentionDepOf = verbosity <= normal
           , (pkg, failureClassification) <- failuresClassification
           ]
diff --git a/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs b/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
index 0e4fb10..ed91d27 100644
--- a/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
+++ b/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
@@ -182,23 +182,23 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
              | Just hash <- [elabPkgSourceHash elab]
              ]
           ++ ( case elabBuildStyle elab of
-                BuildInplaceOnly{} ->
-                  ["dist-dir" J..= J.String dist_dir] ++ [buildInfoFileLocation]
-                BuildAndInstall ->
-                  -- TODO: install dirs?
-                  []
+                 BuildInplaceOnly{} ->
+                   ["dist-dir" J..= J.String dist_dir] ++ [buildInfoFileLocation]
+                 BuildAndInstall ->
+                   -- TODO: install dirs?
+                   []
              )
           ++ case elabPkgOrComp elab of
             ElabPackage pkg ->
               let components =
                     J.object $
                       [ comp2str c
-                        J..= J.object
-                          ( [ "depends" J..= map (jdisplay . confInstId) (map fst ldeps)
-                            , "exe-depends" J..= map (jdisplay . confInstId) edeps
-                            ]
-                              ++ bin_file c
-                          )
+                          J..= J.object
+                            ( [ "depends" J..= map (jdisplay . confInstId) (map fst ldeps)
+                              , "exe-depends" J..= map (jdisplay . confInstId) edeps
+                              ]
+                                ++ bin_file c
+                            )
                       | (c, (ldeps, edeps)) <-
                           ComponentDeps.toList $
                             ComponentDeps.zip
diff --git a/cabal-install/src/Distribution/Client/ProjectPlanning.hs b/cabal-install/src/Distribution/Client/ProjectPlanning.hs
index 0c4facf..a2e508f 100644
--- a/cabal-install/src/Distribution/Client/ProjectPlanning.hs
+++ b/cabal-install/src/Distribution/Client/ProjectPlanning.hs
@@ -335,9 +335,9 @@ rebuildProjectConfig
   -> DistDirLayout
   -> ProjectConfig
   -> IO
-      ( ProjectConfig
-      , [PackageSpecifier UnresolvedSourcePackage]
-      )
+       ( ProjectConfig
+       , [PackageSpecifier UnresolvedSourcePackage]
+       )
 rebuildProjectConfig
   verbosity
   httpTransport
@@ -388,9 +388,9 @@ rebuildProjectConfig
 
     sequence_
       [ do
-        info verbosity . render . vcat $
-          text "this build was affected by the following (project) config files:"
-            : [text "-" <+> docProjectConfigPath path]
+          info verbosity . render . vcat $
+            text "this build was affected by the following (project) config files:"
+              : [text "-" <+> docProjectConfigPath path]
       | Explicit path <- Set.toList $ projectConfigProvenance projectConfig
       ]
 
@@ -526,12 +526,12 @@ rebuildInstallPlan
   -> [PackageSpecifier UnresolvedSourcePackage]
   -> Maybe InstalledPackageIndex
   -> IO
-      ( ElaboratedInstallPlan -- with store packages
-      , ElaboratedInstallPlan -- with source packages
-      , ElaboratedSharedConfig
-      , IndexUtils.TotalIndexState
-      , IndexUtils.ActiveRepos
-      )
+       ( ElaboratedInstallPlan -- with store packages
+       , ElaboratedInstallPlan -- with source packages
+       , ElaboratedSharedConfig
+       , IndexUtils.TotalIndexState
+       , IndexUtils.ActiveRepos
+       )
   -- ^ @(improvedPlan, elaboratedPlan, _, _, _)@
 rebuildInstallPlan
   verbosity
@@ -766,9 +766,9 @@ rebuildInstallPlan
         -> SolverInstallPlan
         -> [PackageSpecifier (SourcePackage (PackageLocation loc))]
         -> Rebuild
-            ( ElaboratedInstallPlan
-            , ElaboratedSharedConfig
-            )
+             ( ElaboratedInstallPlan
+             , ElaboratedSharedConfig
+             )
       phaseElaboratePlan
         ProjectConfig
           { projectConfigShared
@@ -927,12 +927,12 @@ programsMonitorFiles progdb =
 programDbSignature :: ProgramDb -> [ConfiguredProgram]
 programDbSignature progdb =
   [ prog
-    { programMonitorFiles = []
-    , programOverrideEnv =
-        filter
-          ((/= "PATH") . fst)
-          (programOverrideEnv prog)
-    }
+      { programMonitorFiles = []
+      , programOverrideEnv =
+          filter
+            ((/= "PATH") . fst)
+            (programOverrideEnv prog)
+      }
   | prog <- configuredPrograms progdb
   ]
 
@@ -1063,8 +1063,8 @@ getPackageSourceHashes verbosity withRepoCtx solverPlan = do
         ) =
           partitionEithers
             [ case repo of
-              RepoSecure{} -> Left (pkgid, repo)
-              _ -> Right (pkgid, repo)
+                RepoSecure{} -> Left (pkgid, repo)
+                _ -> Right (pkgid, repo)
             | (pkgid, RepoTarballPackage repo _ _) <- allPkgLocations
             ]
 
@@ -1086,10 +1086,10 @@ getPackageSourceHashes verbosity withRepoCtx solverPlan = do
       liftIO $
         sequence
           [ do
-            mtarball <- checkRepoTarballFetched repo pkgid
-            case mtarball of
-              Nothing -> return (Left (pkgid, repo))
-              Just tarball -> return (Right (pkgid, tarball))
+              mtarball <- checkRepoTarballFetched repo pkgid
+              case mtarball of
+                Nothing -> return (Left (pkgid, repo))
+                Just tarball -> return (Right (pkgid, tarball))
           | (pkgid, repo) <- repoTarballPkgsWithoutMetadata
           ]
 
@@ -1112,19 +1112,19 @@ getPackageSourceHashes verbosity withRepoCtx solverPlan = do
               sequence
                 -- Reading the repo index is expensive so we group the packages by repo
                 [ repoContextWithSecureRepo repoctx repo $ \secureRepo ->
-                  Sec.withIndex secureRepo $ \repoIndex ->
-                    sequence
-                      [ do
-                        hash <-
-                          Sec.trusted
-                            <$> Sec.indexLookupHash repoIndex pkgid -- strip off Trusted tag
+                    Sec.withIndex secureRepo $ \repoIndex ->
+                      sequence
+                        [ do
+                            hash <-
+                              Sec.trusted
+                                <$> Sec.indexLookupHash repoIndex pkgid -- strip off Trusted tag
 
-                        -- Note that hackage-security currently uses SHA256
-                        -- but this API could in principle give us some other
-                        -- choice in future.
-                        return (pkgid, hashFromTUF hash)
-                      | pkgid <- pkgids
-                      ]
+                            -- Note that hackage-security currently uses SHA256
+                            -- but this API could in principle give us some other
+                            -- choice in future.
+                            return (pkgid, hashFromTUF hash)
+                        | pkgid <- pkgids
+                        ]
                 | (repo, pkgids) <-
                     map (\grp@((_, repo) :| _) -> (repo, map fst (NE.toList grp)))
                       . NE.groupBy ((==) `on` (remoteRepoName . repoRemote . snd))
@@ -1138,8 +1138,8 @@ getPackageSourceHashes verbosity withRepoCtx solverPlan = do
         repoTarballPkgsNewlyDownloaded <-
           sequence
             [ do
-              tarball <- fetchRepoTarball verbosity repoctx repo pkgid
-              return (pkgid, tarball)
+                tarball <- fetchRepoTarball verbosity repoctx repo pkgid
+                return (pkgid, tarball)
             | (pkgid, repo) <- repoTarballPkgsToDownload
             ]
 
@@ -1164,8 +1164,8 @@ getPackageSourceHashes verbosity withRepoCtx solverPlan = do
       fmap Map.fromList $
         sequence
           [ do
-            srchash <- readFileHashValue tarball
-            return (pkgid, srchash)
+              srchash <- readFileHashValue tarball
+              return (pkgid, srchash)
           | (pkgid, tarball) <- allTarballFilePkgs
           ]
   monitorFiles
@@ -1281,11 +1281,11 @@ planPackages
           . addConstraints
             -- enable stanza constraints where the user asked to enable
             [ LabeledPackageConstraint
-              ( PackageConstraint
-                  (scopeToplevel pkgname)
-                  (PackagePropertyStanzas stanzas)
-              )
-              ConstraintSourceConfigFlagOrTarget
+                ( PackageConstraint
+                    (scopeToplevel pkgname)
+                    (PackagePropertyStanzas stanzas)
+                )
+                ConstraintSourceConfigFlagOrTarget
             | pkg <- localPackages
             , let pkgname = pkgSpecifierTarget pkg
                   stanzaM = Map.findWithDefault Map.empty pkgname pkgStanzasEnable
@@ -1298,11 +1298,11 @@ planPackages
             -- TODO: [nice to have] should have checked at some point that the
             -- package in question actually has these flags.
             [ LabeledPackageConstraint
-              ( PackageConstraint
-                  (scopeToplevel pkgname)
-                  (PackagePropertyFlags flags)
-              )
-              ConstraintSourceConfigFlagOrTarget
+                ( PackageConstraint
+                    (scopeToplevel pkgname)
+                    (PackagePropertyFlags flags)
+                )
+                ConstraintSourceConfigFlagOrTarget
             | (pkgname, flags) <- Map.toList solverSettingFlagAssignments
             ]
           . addConstraints
@@ -1311,11 +1311,11 @@ planPackages
             -- former we just apply all these flags to all local targets which
             -- is silly. We should check if the flags are appropriate.
             [ LabeledPackageConstraint
-              ( PackageConstraint
-                  (scopeToplevel pkgname)
-                  (PackagePropertyFlags flags)
-              )
-              ConstraintSourceConfigFlagOrTarget
+                ( PackageConstraint
+                    (scopeToplevel pkgname)
+                    (PackagePropertyFlags flags)
+                )
+                ConstraintSourceConfigFlagOrTarget
             | let flags = solverSettingFlagAssignment
             , not (PD.nullFlagAssignment flags)
             , pkg <- localPackages
@@ -1674,7 +1674,7 @@ elaborateInstallPlan
               dieProgress $
                 text "Internal libraries only supported with per-component builds."
                   $$ text "Per-component builds were disabled because"
-                  <+> fsep (punctuate comma $ map (text . whyNotPerComponent) $ toList reasons)
+                    <+> fsep (punctuate comma $ map (text . whyNotPerComponent) $ toList reasons)
           -- TODO: Maybe exclude Backpack too
 
           elab0 = elaborateSolverToCommon spkg
@@ -1734,12 +1734,12 @@ elaborateInstallPlan
                )
             -> Cabal.Component
             -> LogProgress
-                ( ( ConfiguredComponentMap
-                  , LinkedComponentMap
-                  , Map ComponentId FilePath
-                  )
-                , ElaboratedConfiguredPackage
-                )
+                 ( ( ConfiguredComponentMap
+                   , LinkedComponentMap
+                   , Map ComponentId FilePath
+                   )
+                 , ElaboratedConfiguredPackage
+                 )
           buildComponent (cc_map, lc_map, exe_map) comp =
             addProgressCtx
               ( text "In the stanza"
@@ -1791,8 +1791,8 @@ elaborateInstallPlan
                           prettyShow pkgid
                             ++ "-inplace"
                             ++ ( case Cabal.componentNameString cname of
-                                  Nothing -> ""
-                                  Just s -> "-" ++ prettyShow s
+                                   Nothing -> ""
+                                   Just s -> "-" ++ prettyShow s
                                )
                       BuildAndInstall ->
                         hashedInstalledPackageId
@@ -2873,8 +2873,8 @@ data TargetRequested
 availableTargets
   :: ElaboratedInstallPlan
   -> Map
-      (PackageId, ComponentName)
-      [AvailableTarget (UnitId, ComponentName)]
+       (PackageId, ComponentName)
+       [AvailableTarget (UnitId, ComponentName)]
 availableTargets installPlan =
   let rs =
         [ (pkgid, cname, fake, target)
@@ -3529,12 +3529,12 @@ pruneInstallPlanPass2 pkgs =
           -- TODO: allow requesting executable with different name
           -- than package name
           [ ComponentTarget
-            ( Cabal.CExeName $
-                packageNameToUnqualComponentName $
-                  packageName $
-                    elabPkgSourceId elab
-            )
-            WholeComponent
+              ( Cabal.CExeName $
+                  packageNameToUnqualComponentName $
+                    packageName $
+                      elabPkgSourceId elab
+              )
+              WholeComponent
           | installedUnitId elab `Set.member` hasReverseExeDeps
           ]
 
@@ -3587,8 +3587,8 @@ pruneInstallPlanToDependencies
   :: Set UnitId
   -> ElaboratedInstallPlan
   -> Either
-      CannotPruneDependencies
-      ElaboratedInstallPlan
+       CannotPruneDependencies
+       ElaboratedInstallPlan
 pruneInstallPlanToDependencies pkgTargets installPlan =
   assert
     ( all
@@ -3608,8 +3608,8 @@ pruneInstallPlanToDependencies pkgTargets installPlan =
     checkBrokenDeps
       :: Graph.Graph ElaboratedPlanPackage
       -> Either
-          CannotPruneDependencies
-          (Graph.Graph ElaboratedPlanPackage)
+           CannotPruneDependencies
+           (Graph.Graph ElaboratedPlanPackage)
     checkBrokenDeps graph =
       case Graph.broken graph of
         [] -> Right graph
@@ -4192,9 +4192,9 @@ packageHashInputs
 packageHashInputs
   pkgshared
   elab@( ElaboratedConfiguredPackage
-          { elabPkgSourceHash = Just srchash
-          }
-        ) =
+           { elabPkgSourceHash = Just srchash
+           }
+         ) =
     PackageHashInputs
       { pkgHashPkgId = packageId elab
       , pkgHashComponent =
diff --git a/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs b/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
index 178ffdc..0e8b35e 100644
--- a/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
+++ b/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
@@ -392,7 +392,7 @@ elabRequiresRegistration elab =
       -- target actually depends on lib:cpphs.
       build_target
         || ( elabBuildStyle elab == BuildAndInstall
-              && Cabal.hasPublicLib (elabPkgDescription elab)
+               && Cabal.hasPublicLib (elabPkgDescription elab)
            )
         -- the next sub-condition below is currently redundant
         -- (see discussion in #5604 for more details), but it's
diff --git a/cabal-install/src/Distribution/Client/ReplFlags.hs b/cabal-install/src/Distribution/Client/ReplFlags.hs
index a7136aa..9711145 100644
--- a/cabal-install/src/Distribution/Client/ReplFlags.hs
+++ b/cabal-install/src/Distribution/Client/ReplFlags.hs
@@ -84,12 +84,12 @@ topReplOptions showOrParseArgs =
          -- to stay, even after the @cabal repl@ command exits.
          --
          option
-          []
-          ["keep-temp-files"]
-          "Keep temporary files"
-          replKeepTempFiles
-          (\b flags -> flags{replKeepTempFiles = b})
-          trueArg
+           []
+           ["keep-temp-files"]
+           "Keep temporary files"
+           replKeepTempFiles
+           (\b flags -> flags{replKeepTempFiles = b})
+           trueArg
        ]
   where
     set1 a x = x{configureReplOptions = a}
diff --git a/cabal-install/src/Distribution/Client/Run.hs b/cabal-install/src/Distribution/Client/Run.hs
index 6784e3b..1759e8f 100644
--- a/cabal-install/src/Distribution/Client/Run.hs
+++ b/cabal-install/src/Distribution/Client/Run.hs
@@ -76,11 +76,11 @@ splitRunArgs verbosity lbi args =
     pkg_descr = localPkgDescr lbi
     whichExecutable
       :: Either
-          String -- Error string.
-          ( Bool -- If it was manually chosen.
-          , Executable -- The executable.
-          , [String] -- The remaining parameters.
-          )
+           String -- Error string.
+           ( Bool -- If it was manually chosen.
+           , Executable -- The executable.
+           , [String] -- The remaining parameters.
+           )
     whichExecutable = case (enabledExes, args) of
       ([], _) -> Left "Couldn't find any enabled executables."
       ([exe], []) -> return (False, exe, [])
@@ -113,18 +113,18 @@ splitRunArgs verbosity lbi args =
           ]
             ++ [ ( name
                  , "There is a test-suite '"
-                    ++ prettyShow name
-                    ++ "',"
-                    ++ " but the `run` command is only for executables."
+                     ++ prettyShow name
+                     ++ "',"
+                     ++ " but the `run` command is only for executables."
                  )
                | t <- testSuites pkg_descr
                , let name = testName t
                ]
             ++ [ ( name
                  , "There is a benchmark '"
-                    ++ prettyShow name
-                    ++ "',"
-                    ++ " but the `run` command is only for executables."
+                     ++ prettyShow name
+                     ++ "',"
+                     ++ " but the `run` command is only for executables."
                  )
                | b <- benchmarks pkg_descr
                , let name = benchmarkName b
diff --git a/cabal-install/src/Distribution/Client/Setup.hs b/cabal-install/src/Distribution/Client/Setup.hs
index 222b53b..0c12f8b 100644
--- a/cabal-install/src/Distribution/Client/Setup.hs
+++ b/cabal-install/src/Distribution/Client/Setup.hs
@@ -2199,13 +2199,13 @@ allSolvers = intercalate ", " (map prettyShow ([minBound .. maxBound] :: [PreSol
 
 installCommand
   :: CommandUI
-      ( ConfigFlags
-      , ConfigExFlags
-      , InstallFlags
-      , HaddockFlags
-      , TestFlags
-      , BenchmarkFlags
-      )
+       ( ConfigFlags
+       , ConfigExFlags
+       , InstallFlags
+       , HaddockFlags
+       , TestFlags
+       , BenchmarkFlags
+       )
 installCommand =
   CommandUI
     { commandName = "install"
@@ -2351,12 +2351,12 @@ filterHaddockFlags flags cabalLibVersion
 haddockOptions :: ShowOrParseArgs -> [OptionField HaddockFlags]
 haddockOptions showOrParseArgs =
   [ opt
-    { optionName = "haddock-" ++ name
-    , optionDescr =
-        [ fmapOptFlags (\(_, lflags) -> ([], map ("haddock-" ++) lflags)) descr
-        | descr <- optionDescr opt
-        ]
-    }
+      { optionName = "haddock-" ++ name
+      , optionDescr =
+          [ fmapOptFlags (\(_, lflags) -> ([], map ("haddock-" ++) lflags)) descr
+          | descr <- optionDescr opt
+          ]
+      }
   | opt <- commandOptions Cabal.haddockCommand showOrParseArgs
   , let name = optionName opt
   , name
@@ -2384,12 +2384,12 @@ haddockOptions showOrParseArgs =
 testOptions :: ShowOrParseArgs -> [OptionField TestFlags]
 testOptions showOrParseArgs =
   [ opt
-    { optionName = prefixTest name
-    , optionDescr =
-        [ fmapOptFlags (\(_, lflags) -> ([], map prefixTest lflags)) descr
-        | descr <- optionDescr opt
-        ]
-    }
+      { optionName = prefixTest name
+      , optionDescr =
+          [ fmapOptFlags (\(_, lflags) -> ([], map prefixTest lflags)) descr
+          | descr <- optionDescr opt
+          ]
+      }
   | opt <- commandOptions Cabal.testCommand showOrParseArgs
   , let name = optionName opt
   , name
@@ -2411,12 +2411,12 @@ testOptions showOrParseArgs =
 benchmarkOptions :: ShowOrParseArgs -> [OptionField BenchmarkFlags]
 benchmarkOptions showOrParseArgs =
   [ opt
-    { optionName = prefixBenchmark name
-    , optionDescr =
-        [ fmapOptFlags (\(_, lflags) -> ([], map prefixBenchmark lflags)) descr
-        | descr <- optionDescr opt
-        ]
-    }
+      { optionName = prefixBenchmark name
+      , optionDescr =
+          [ fmapOptFlags (\(_, lflags) -> ([], map prefixBenchmark lflags)) descr
+          | descr <- optionDescr opt
+          ]
+      }
   | opt <- commandOptions Cabal.benchmarkCommand showOrParseArgs
   , let name = optionName opt
   , name `elem` ["benchmark-options", "benchmark-option"]
@@ -2503,163 +2503,163 @@ installOptions showOrParseArgs =
       installOnlyConstrained
       (\v flags -> flags{installOnlyConstrained = v})
     ++ [ option
-          []
-          ["reinstall"]
-          "Install even if it means installing the same version again."
-          installReinstall
-          (\v flags -> flags{installReinstall = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["reinstall"]
+           "Install even if it means installing the same version again."
+           installReinstall
+           (\v flags -> flags{installReinstall = v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["avoid-reinstalls"]
-          "Do not select versions that would destructively overwrite installed packages."
-          (fmap asBool . installAvoidReinstalls)
-          (\v flags -> flags{installAvoidReinstalls = fmap AvoidReinstalls v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["avoid-reinstalls"]
+           "Do not select versions that would destructively overwrite installed packages."
+           (fmap asBool . installAvoidReinstalls)
+           (\v flags -> flags{installAvoidReinstalls = fmap AvoidReinstalls v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["force-reinstalls"]
-          "Reinstall packages even if they will most likely break other installed packages."
-          installOverrideReinstall
-          (\v flags -> flags{installOverrideReinstall = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["force-reinstalls"]
+           "Reinstall packages even if they will most likely break other installed packages."
+           installOverrideReinstall
+           (\v flags -> flags{installOverrideReinstall = v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["upgrade-dependencies"]
-          "Pick the latest version for all dependencies, rather than trying to pick an installed version."
-          installUpgradeDeps
-          (\v flags -> flags{installUpgradeDeps = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["upgrade-dependencies"]
+           "Pick the latest version for all dependencies, rather than trying to pick an installed version."
+           installUpgradeDeps
+           (\v flags -> flags{installUpgradeDeps = v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["only-dependencies"]
-          "Install only the dependencies necessary to build the given packages"
-          installOnlyDeps
-          (\v flags -> flags{installOnlyDeps = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["only-dependencies"]
+           "Install only the dependencies necessary to build the given packages"
+           installOnlyDeps
+           (\v flags -> flags{installOnlyDeps = v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["dependencies-only"]
-          "A synonym for --only-dependencies"
-          installOnlyDeps
-          (\v flags -> flags{installOnlyDeps = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["dependencies-only"]
+           "A synonym for --only-dependencies"
+           installOnlyDeps
+           (\v flags -> flags{installOnlyDeps = v})
+           (yesNoOpt showOrParseArgs)
        , option
-          []
-          ["index-state"]
-          ( "Use source package index state as it existed at a previous time. "
-              ++ "Accepts unix-timestamps (e.g. '@1474732068'), ISO8601 UTC timestamps "
-              ++ "(e.g. '2016-09-24T17:47:48Z'), or 'HEAD' (default: 'HEAD')."
-          )
-          installIndexState
-          (\v flags -> flags{installIndexState = v})
-          ( reqArg
-              "STATE"
-              ( parsecToReadE
-                  ( const $
-                      "index-state must be a  "
-                        ++ "unix-timestamps (e.g. '@1474732068'), "
-                        ++ "a ISO8601 UTC timestamp "
-                        ++ "(e.g. '2016-09-24T17:47:48Z'), or 'HEAD'"
-                  )
-                  (toFlag `fmap` parsec)
-              )
-              (flagToList . fmap prettyShow)
-          )
+           []
+           ["index-state"]
+           ( "Use source package index state as it existed at a previous time. "
+               ++ "Accepts unix-timestamps (e.g. '@1474732068'), ISO8601 UTC timestamps "
+               ++ "(e.g. '2016-09-24T17:47:48Z'), or 'HEAD' (default: 'HEAD')."
+           )
+           installIndexState
+           (\v flags -> flags{installIndexState = v})
+           ( reqArg
+               "STATE"
+               ( parsecToReadE
+                   ( const $
+                       "index-state must be a  "
+                         ++ "unix-timestamps (e.g. '@1474732068'), "
+                         ++ "a ISO8601 UTC timestamp "
+                         ++ "(e.g. '2016-09-24T17:47:48Z'), or 'HEAD'"
+                   )
+                   (toFlag `fmap` parsec)
+               )
+               (flagToList . fmap prettyShow)
+           )
        , option
-          []
-          ["root-cmd"]
-          "(No longer supported, do not use.)"
-          installRootCmd
-          (\v flags -> flags{installRootCmd = v})
-          (reqArg' "COMMAND" toFlag flagToList)
+           []
+           ["root-cmd"]
+           "(No longer supported, do not use.)"
+           installRootCmd
+           (\v flags -> flags{installRootCmd = v})
+           (reqArg' "COMMAND" toFlag flagToList)
        , option
-          []
-          ["symlink-bindir"]
-          "Add symlinks to installed executables into this directory."
-          installSymlinkBinDir
-          (\v flags -> flags{installSymlinkBinDir = v})
-          (reqArgFlag "DIR")
+           []
+           ["symlink-bindir"]
+           "Add symlinks to installed executables into this directory."
+           installSymlinkBinDir
+           (\v flags -> flags{installSymlinkBinDir = v})
+           (reqArgFlag "DIR")
        , option
-          []
-          ["build-summary"]
-          "Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)"
-          installSummaryFile
-          (\v flags -> flags{installSummaryFile = v})
-          (reqArg' "TEMPLATE" (\x -> toNubList [toPathTemplate x]) (map fromPathTemplate . fromNubList))
+           []
+           ["build-summary"]
+           "Save build summaries to file (name template can use $pkgid, $compiler, $os, $arch)"
+           installSummaryFile
+           (\v flags -> flags{installSummaryFile = v})
+           (reqArg' "TEMPLATE" (\x -> toNubList [toPathTemplate x]) (map fromPathTemplate . fromNubList))
        , option
-          []
-          ["build-log"]
-          "Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)"
-          installLogFile
-          (\v flags -> flags{installLogFile = v})
-          ( reqArg'
-              "TEMPLATE"
-              (toFlag . toPathTemplate)
-              (flagToList . fmap fromPathTemplate)
-          )
+           []
+           ["build-log"]
+           "Log all builds to file (name template can use $pkgid, $compiler, $os, $arch)"
+           installLogFile
+           (\v flags -> flags{installLogFile = v})
+           ( reqArg'
+               "TEMPLATE"
+               (toFlag . toPathTemplate)
+               (flagToList . fmap fromPathTemplate)
+           )
        , option
-          []
-          ["remote-build-reporting"]
-          "Generate build reports to send to a remote server (none, anonymous or detailed)."
-          installBuildReports
-          (\v flags -> flags{installBuildReports = v})
-          ( reqArg
-              "LEVEL"
-              ( parsecToReadE
-                  ( const $
-                      "report level must be 'none', "
-                        ++ "'anonymous' or 'detailed'"
-                  )
-                  (toFlag `fmap` parsec)
-              )
-              (flagToList . fmap prettyShow)
-          )
+           []
+           ["remote-build-reporting"]
+           "Generate build reports to send to a remote server (none, anonymous or detailed)."
+           installBuildReports
+           (\v flags -> flags{installBuildReports = v})
+           ( reqArg
+               "LEVEL"
+               ( parsecToReadE
+                   ( const $
+                       "report level must be 'none', "
+                         ++ "'anonymous' or 'detailed'"
+                   )
+                   (toFlag `fmap` parsec)
+               )
+               (flagToList . fmap prettyShow)
+           )
        , option
-          []
-          ["report-planning-failure"]
-          "Generate build reports when the dependency solver fails. This is used by the Hackage build bot."
-          installReportPlanningFailure
-          (\v flags -> flags{installReportPlanningFailure = v})
-          trueArg
+           []
+           ["report-planning-failure"]
+           "Generate build reports when the dependency solver fails. This is used by the Hackage build bot."
+           installReportPlanningFailure
+           (\v flags -> flags{installReportPlanningFailure = v})
+           trueArg
        , option
-          ""
-          ["per-component"]
-          "Per-component builds when possible"
-          installPerComponent
-          (\v flags -> flags{installPerComponent = v})
-          (boolOpt [] [])
+           ""
+           ["per-component"]
+           "Per-component builds when possible"
+           installPerComponent
+           (\v flags -> flags{installPerComponent = v})
+           (boolOpt [] [])
        , option
-          []
-          ["run-tests"]
-          "Run package test suites during installation."
-          installRunTests
-          (\v flags -> flags{installRunTests = v})
-          trueArg
+           []
+           ["run-tests"]
+           "Run package test suites during installation."
+           installRunTests
+           (\v flags -> flags{installRunTests = v})
+           trueArg
        , option
-          []
-          ["semaphore"]
-          "Use a semaphore so GHC can compile components in parallel"
-          installUseSemaphore
-          (\v flags -> flags{installUseSemaphore = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["semaphore"]
+           "Use a semaphore so GHC can compile components in parallel"
+           installUseSemaphore
+           (\v flags -> flags{installUseSemaphore = v})
+           (yesNoOpt showOrParseArgs)
        , optionNumJobs
-          installNumJobs
-          (\v flags -> flags{installNumJobs = v})
+           installNumJobs
+           (\v flags -> flags{installNumJobs = v})
        , option
-          []
-          ["keep-going"]
-          "After a build failure, continue to build other unaffected packages."
-          installKeepGoing
-          (\v flags -> flags{installKeepGoing = v})
-          trueArg
+           []
+           ["keep-going"]
+           "After a build failure, continue to build other unaffected packages."
+           installKeepGoing
+           (\v flags -> flags{installKeepGoing = v})
+           trueArg
        , option
-          []
-          ["offline"]
-          "Don't download packages from the Internet."
-          installOfflineMode
-          (\v flags -> flags{installOfflineMode = v})
-          (yesNoOpt showOrParseArgs)
+           []
+           ["offline"]
+           "Don't download packages from the Internet."
+           installOfflineMode
+           (\v flags -> flags{installOfflineMode = v})
+           (yesNoOpt showOrParseArgs)
        ]
     ++ case showOrParseArgs of -- TODO: remove when "cabal install"
     -- avoids
diff --git a/cabal-install/src/Distribution/Client/SolverInstallPlan.hs b/cabal-install/src/Distribution/Client/SolverInstallPlan.hs
index f442208..96cc9b8 100644
--- a/cabal-install/src/Distribution/Client/SolverInstallPlan.hs
+++ b/cabal-install/src/Distribution/Client/SolverInstallPlan.hs
@@ -166,8 +166,8 @@ remove
   :: (SolverPlanPackage -> Bool)
   -> SolverInstallPlan
   -> Either
-      [SolverPlanProblem]
-      (SolverInstallPlan)
+       [SolverPlanProblem]
+       (SolverInstallPlan)
 remove shouldRemove plan =
   new (planIndepGoals plan) newIndex
   where
@@ -217,9 +217,9 @@ showPlanProblem (PackageInconsistency name inconsistencies) =
     ++ " but they require inconsistent versions:\n"
     ++ unlines
       [ "  package "
-        ++ prettyShow pkg
-        ++ " requires "
-        ++ prettyShow (PackageIdentifier name ver)
+          ++ prettyShow pkg
+          ++ " requires "
+          ++ prettyShow (PackageIdentifier name ver)
       | (pkg, ver) <- inconsistencies
       ]
 showPlanProblem (PackageStateInvalid pkg pkg') =
@@ -245,11 +245,11 @@ problems
   -> [SolverPlanProblem]
 problems indepGoals index =
   [ PackageMissingDeps
-    pkg
-    ( mapMaybe
-        (fmap packageId . flip Graph.lookup index)
-        missingDeps
-    )
+      pkg
+      ( mapMaybe
+          (fmap packageId . flip Graph.lookup index)
+          missingDeps
+      )
   | (pkg, missingDeps) <- Graph.broken index
   ]
     ++ [ PackageCycle cycleGroup
@@ -257,14 +257,14 @@ problems indepGoals index =
        ]
     ++ [ PackageInconsistency name inconsistencies
        | (name, inconsistencies) <-
-          dependencyInconsistencies indepGoals index
+           dependencyInconsistencies indepGoals index
        ]
     ++ [ PackageStateInvalid pkg pkg'
        | pkg <- Foldable.toList index
        , Just pkg' <-
-          map
-            (flip Graph.lookup index)
-            (nodeNeighbors pkg)
+           map
+             (flip Graph.lookup index)
+             (nodeNeighbors pkg)
        , not (stateDependencyRelation pkg pkg')
        ]
 
diff --git a/cabal-install/src/Distribution/Client/Store.hs b/cabal-install/src/Distribution/Client/Store.hs
index 4e7d97d..cf5ec15 100644
--- a/cabal-install/src/Distribution/Client/Store.hs
+++ b/cabal-install/src/Distribution/Client/Store.hs
@@ -202,28 +202,28 @@ newStoreEntry
         if exists
           then -- If the entry exists then we lost the race and we must abandon,
           -- unlock and re-use the existing store entry.
-          do
-            info verbosity $
-              "Concurrent build race: abandoning build in favour of existing "
-                ++ "store entry "
-                ++ prettyShow compid
-                </> prettyShow unitid
-            return UseExistingStoreEntry
+            do
+              info verbosity $
+                "Concurrent build race: abandoning build in favour of existing "
+                  ++ "store entry "
+                  ++ prettyShow compid
+                  </> prettyShow unitid
+              return UseExistingStoreEntry
           else -- If the entry does not exist then we won the race and can proceed.
-          do
-            -- Register the package into the package db (if appropriate).
-            register
+            do
+              -- Register the package into the package db (if appropriate).
+              register
 
-            -- Atomically rename the temp dir to the final store entry location.
-            renameDirectory incomingEntryDir finalEntryDir
-            for_ otherFiles $ \file -> do
-              let finalStoreFile = storeDirectory compiler </> makeRelative (incomingTmpDir </> (dropDrive (storeDirectory compiler))) file
-              createDirectoryIfMissing True (takeDirectory finalStoreFile)
-              renameFile file finalStoreFile
+              -- Atomically rename the temp dir to the final store entry location.
+              renameDirectory incomingEntryDir finalEntryDir
+              for_ otherFiles $ \file -> do
+                let finalStoreFile = storeDirectory compiler </> makeRelative (incomingTmpDir </> (dropDrive (storeDirectory compiler))) file
+                createDirectoryIfMissing True (takeDirectory finalStoreFile)
+                renameFile file finalStoreFile
 
-            debug verbosity $
-              "Installed store entry " ++ prettyShow compid </> prettyShow unitid
-            return UseNewStoreEntry
+              debug verbosity $
+                "Installed store entry " ++ prettyShow compid </> prettyShow unitid
+              return UseNewStoreEntry
     where
       compid = compilerId compiler
 
diff --git a/cabal-install/src/Distribution/Client/TargetSelector.hs b/cabal-install/src/Distribution/Client/TargetSelector.hs
index d294136..648be65 100644
--- a/cabal-install/src/Distribution/Client/TargetSelector.hs
+++ b/cabal-install/src/Distribution/Client/TargetSelector.hs
@@ -688,8 +688,8 @@ disambiguateTargetSelectors
   -> MatchClass
   -> [TargetSelector]
   -> Either
-      [(TargetSelector, [(TargetString, [TargetSelector])])]
-      [(TargetString, TargetSelector)]
+       [(TargetSelector, [(TargetString, [TargetSelector])])]
+       [(TargetString, TargetSelector)]
 disambiguateTargetSelectors matcher matchInput exactMatch matchResults =
   case partitionEithers results of
     (errs@(_ : _), _) -> Left errs
@@ -741,27 +741,27 @@ disambiguateTargetSelectors matcher matchInput exactMatch matchResults =
     -- that has an unambiguous match.
     results
       :: [ Either
-            (TargetSelector, [(TargetString, [TargetSelector])])
-            (TargetString, TargetSelector)
+             (TargetSelector, [(TargetString, [TargetSelector])])
+             (TargetString, TargetSelector)
          ]
     results =
       [ case findUnambiguous originalMatch matchRenderings of
-        Just unambiguousRendering ->
-          Right
-            ( forgetFileStatus unambiguousRendering
-            , originalMatch
-            )
-        -- This case is an internal error, but we bubble it up and report it
-        Nothing ->
-          Left
-            ( originalMatch
-            , [ (forgetFileStatus rendering, matches)
-              | rendering <- matchRenderings
-              , let Match m _ matches =
-                      memoisedMatches Map.! rendering
-              , m /= Inexact
-              ]
-            )
+          Just unambiguousRendering ->
+            Right
+              ( forgetFileStatus unambiguousRendering
+              , originalMatch
+              )
+          -- This case is an internal error, but we bubble it up and report it
+          Nothing ->
+            Left
+              ( originalMatch
+              , [ (forgetFileStatus rendering, matches)
+                | rendering <- matchRenderings
+                , let Match m _ matches =
+                        memoisedMatches Map.! rendering
+                , m /= Inexact
+                ]
+              )
       | (originalMatch, matchRenderings) <- matchResultsRenderings
       ]
 
@@ -1907,15 +1907,15 @@ collectKnownPackageInfo
 collectKnownComponentInfo :: PackageDescription -> [KnownComponent]
 collectKnownComponentInfo pkg =
   [ KnownComponent
-    { cinfoName = componentName c
-    , cinfoStrName = componentStringName (packageName pkg) (componentName c)
-    , cinfoPackageId = packageId pkg
-    , cinfoSrcDirs = ordNub (map getSymbolicPath (hsSourceDirs bi))
-    , cinfoModules = ordNub (componentModules c)
-    , cinfoHsFiles = ordNub (componentHsFiles c)
-    , cinfoCFiles = ordNub (cSources bi)
-    , cinfoJsFiles = ordNub (jsSources bi)
-    }
+      { cinfoName = componentName c
+      , cinfoStrName = componentStringName (packageName pkg) (componentName c)
+      , cinfoPackageId = packageId pkg
+      , cinfoSrcDirs = ordNub (map getSymbolicPath (hsSourceDirs bi))
+      , cinfoModules = ordNub (componentModules c)
+      , cinfoHsFiles = ordNub (componentHsFiles c)
+      , cinfoCFiles = ordNub (cSources bi)
+      , cinfoJsFiles = ordNub (jsSources bi)
+      }
   | c <- pkgComponents pkg
   , let bi = componentBuildInfo c
   ]
@@ -2084,8 +2084,8 @@ matchPackage pinfo = \str fstatus ->
   orNoThingIn "project" "" $
     matchPackageName pinfo str
       <//> ( matchPackageNameUnknown str
-              <|> matchPackageDir pinfo str fstatus
-              <|> matchPackageFile pinfo str fstatus
+               <|> matchPackageDir pinfo str fstatus
+               <|> matchPackageFile pinfo str fstatus
            )
 
 matchPackageName :: [KnownPackage] -> String -> Match KnownPackage
diff --git a/cabal-install/src/Distribution/Client/Upload.hs b/cabal-install/src/Distribution/Client/Upload.hs
index 6e96fa0..ef59b92 100644
--- a/cabal-install/src/Distribution/Client/Upload.hs
+++ b/cabal-install/src/Distribution/Client/Upload.hs
@@ -159,8 +159,8 @@ uploadDoc verbosity repoCtxt mToken mUsername mPassword isCandidate path = do
   when
     ( reverse reverseSuffix /= "docs.tar.gz"
         || ( case reversePkgid of
-              [] -> True
-              (c : _) -> c /= '-'
+               [] -> True
+               (c : _) -> c /= '-'
            )
     )
     $ dieWithException verbosity ExpectedMatchingFileName
diff --git a/cabal-install/src/Distribution/Client/Utils.hs b/cabal-install/src/Distribution/Client/Utils.hs
index f5a10da..a318f23 100644
--- a/cabal-install/src/Distribution/Client/Utils.hs
+++ b/cabal-install/src/Distribution/Client/Utils.hs
@@ -488,7 +488,7 @@ concatMapM :: Monad m => (a -> m [b]) -> [a] -> m [b]
 {-# INLINE concatMapM #-}
 concatMapM op = foldr f (pure [])
   where
-    f x xs = do x' <- op x; if null x' then xs else do { xs' <- xs; pure $ x' ++ xs' }
+    f x xs = do x' <- op x; if null x' then xs else do xs' <- xs; pure $ x' ++ xs'
 
 -- | From Control.Monad.Extra
 --   https://hackage.haskell.org/package/extra-1.7.9
diff --git a/cabal-install/src/Distribution/Client/VCS.hs b/cabal-install/src/Distribution/Client/VCS.hs
index 7c071de..f15f376 100644
--- a/cabal-install/src/Distribution/Client/VCS.hs
+++ b/cabal-install/src/Distribution/Client/VCS.hs
@@ -181,8 +181,8 @@ validatePDSourceRepo repo = do
 validateSourceRepos
   :: [SourceRepositoryPackage f]
   -> Either
-      [(SourceRepositoryPackage f, SourceRepoProblem)]
-      [(SourceRepositoryPackage f, String, RepoType, VCS Program)]
+       [(SourceRepositoryPackage f, SourceRepoProblem)]
+       [(SourceRepositoryPackage f, String, RepoType, VCS Program)]
 validateSourceRepos rs =
   case partitionEithers (map validateSourceRepo' rs) of
     (problems@(_ : _), _) -> Left problems
@@ -191,8 +191,8 @@ validateSourceRepos rs =
     validateSourceRepo'
       :: SourceRepositoryPackage f
       -> Either
-          (SourceRepositoryPackage f, SourceRepoProblem)
-          (SourceRepositoryPackage f, String, RepoType, VCS Program)
+           (SourceRepositoryPackage f, SourceRepoProblem)
+           (SourceRepositoryPackage f, String, RepoType, VCS Program)
     validateSourceRepo' r =
       either
         (Left . (,) r)
@@ -770,8 +770,8 @@ vcsPijul =
       [programInvocation prog cloneArgs]
         -- And if there's a tag, we have to do that in a second step:
         ++ [ (programInvocation prog (checkoutArgs tag))
-            { progInvokeCwd = Just destdir
-            }
+               { progInvokeCwd = Just destdir
+               }
            | tag <- maybeToList (srpTag repo)
            ]
       where
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/Get.hs b/cabal-install/tests/UnitTests/Distribution/Client/Get.hs
index 2788a21..2ca348c 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/Get.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/Get.hs
@@ -132,11 +132,11 @@ testSelectRepoKind :: Assertion
 testSelectRepoKind =
   sequence_
     [ do
-      e <- test requestedRepoType pkgrepos
-      e @?= ClonePackageNoRepoType pkgidfoo expectedRepo
+        e <- test requestedRepoType pkgrepos
+        e @?= ClonePackageNoRepoType pkgidfoo expectedRepo
 
-      e' <- test requestedRepoType (reverse pkgrepos)
-      e' @?= ClonePackageNoRepoType pkgidfoo expectedRepo
+        e' <- test requestedRepoType (reverse pkgrepos)
+        e' @?= ClonePackageNoRepoType pkgidfoo expectedRepo
     | let test rt rs =
             assertException $
               clonePackagesFromSourceRepo verbosity "." rt [] rs
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs b/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
index d35ab35..2d226d6 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
@@ -354,16 +354,16 @@ driverFunctionTest pkgIx srcDb comp =
                     ]
 
             case ( _runPrompt $
-                    createProject
-                      comp
-                      silent
-                      pkgIx
-                      srcDb
-                      ( emptyFlags
-                          { initializeTestSuite = Flag True
-                          , packageType = Flag LibraryAndExecutable
-                          }
-                      )
+                     createProject
+                       comp
+                       silent
+                       pkgIx
+                       srcDb
+                       ( emptyFlags
+                           { initializeTestSuite = Flag True
+                           , packageType = Flag LibraryAndExecutable
+                           }
+                       )
                  )
               inputs of
               Right (ProjectSettings opts desc (Just lib) (Just exe) (Just test), _) -> do
@@ -506,16 +506,16 @@ driverFunctionTest pkgIx srcDb comp =
                     ]
 
             case ( _runPrompt $
-                    createProject
-                      comp
-                      silent
-                      pkgIx
-                      srcDb
-                      ( emptyFlags
-                          { initializeTestSuite = Flag True
-                          , packageType = Flag Library
-                          }
-                      )
+                     createProject
+                       comp
+                       silent
+                       pkgIx
+                       srcDb
+                       ( emptyFlags
+                           { initializeTestSuite = Flag True
+                           , packageType = Flag Library
+                           }
+                       )
                  )
               inputs of
               Right (ProjectSettings opts desc (Just lib) Nothing (Just test), _) -> do
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/Init/Utils.hs b/cabal-install/tests/UnitTests/Distribution/Client/Init/Utils.hs
index e5ed074..297a1a4 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/Init/Utils.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/Init/Utils.hs
@@ -80,8 +80,8 @@ mkLicense lid = SPDX.License (SPDX.ELicense (SPDX.ELicenseId lid) Nothing)
 mangleBaseDep :: a -> (a -> [Dependency]) -> [Dependency]
 mangleBaseDep target f =
   [ if unPackageName x == "base"
-    then Dependency x anyVersion z
-    else dep
+      then Dependency x anyVersion z
+      else dep
   | dep@(Dependency x _ z) <- f target
   ]
 
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/InstallPlan.hs b/cabal-install/tests/UnitTests/Distribution/Client/InstallPlan.hs
index 39c719f..88cfedf 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/InstallPlan.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/InstallPlan.hs
@@ -131,8 +131,8 @@ isReversePartialTopologicalOrder :: Graph -> [Vertex] -> Bool
 isReversePartialTopologicalOrder g vs =
   and
     [ case (ixs ! u, ixs ! v) of
-      (Just ixu, Just ixv) -> ixu > ixv
-      _ -> True
+        (Just ixu, Just ixv) -> ixu > ixv
+        _ -> True
     | let ixs =
             array
               (bounds g)
@@ -240,11 +240,11 @@ arbitraryInstallPlan mkIPkg mkSrcPkg ipkgProportion graph = do
       )
       $ sequenceA
         [ do
-          isipkg <-
-            if isRoot
-              then pick ipkgProportion
-              else return False
-          return (v, isipkg)
+            isipkg <-
+              if isRoot
+                then pick ipkgProportion
+                else return False
+            return (v, isipkg)
         | (v, n) <- assocs (outdegree graph)
         , let isRoot = n == 0
         ]
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs b/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
index abdc1e7..e55e401 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
@@ -407,20 +407,20 @@ instance Arbitrary ProjectConfig where
       , projectConfigAllPackages = x9
       } =
       [ ProjectConfig
-        { projectPackages = x0'
-        , projectPackagesOptional = x1'
-        , projectPackagesRepo = x2'
-        , projectPackagesNamed = x3'
-        , projectConfigBuildOnly = x4'
-        , projectConfigShared = x5'
-        , projectConfigProvenance = x6'
-        , projectConfigLocalPackages = x7'
-        , projectConfigSpecificPackage =
-            ( MapMappend
-                (fmap getNonMEmpty x8')
-            )
-        , projectConfigAllPackages = x9'
-        }
+          { projectPackages = x0'
+          , projectPackagesOptional = x1'
+          , projectPackagesRepo = x2'
+          , projectPackagesNamed = x3'
+          , projectConfigBuildOnly = x4'
+          , projectConfigShared = x5'
+          , projectConfigProvenance = x6'
+          , projectConfigLocalPackages = x7'
+          , projectConfigSpecificPackage =
+              ( MapMappend
+                  (fmap getNonMEmpty x8')
+              )
+          , projectConfigAllPackages = x9'
+          }
       | ((x0', x1', x2', x3'), (x4', x5', x6', x7', x8', x9')) <-
           shrink
             ( (x0, x1, x2, x3)
@@ -522,26 +522,26 @@ instance Arbitrary ProjectConfigBuildOnly where
       , projectConfigClientInstallFlags = x17
       } =
       [ ProjectConfigBuildOnly
-        { projectConfigVerbosity = x00'
-        , projectConfigDryRun = x01'
-        , projectConfigOnlyDeps = x02'
-        , projectConfigOnlyDownload = x18'
-        , projectConfigSummaryFile = x03'
-        , projectConfigLogFile = x04'
-        , projectConfigBuildReports = x05'
-        , projectConfigReportPlanningFailure = x06'
-        , projectConfigSymlinkBinDir = x07'
-        , projectConfigNumJobs = postShrink_NumJobs x09'
-        , projectConfigUseSemaphore = x19'
-        , projectConfigKeepGoing = x10'
-        , projectConfigOfflineMode = x11'
-        , projectConfigKeepTempFiles = x12'
-        , projectConfigHttpTransport = x13
-        , projectConfigIgnoreExpiry = x14'
-        , projectConfigCacheDir = x15
-        , projectConfigLogsDir = x16
-        , projectConfigClientInstallFlags = x17'
-        }
+          { projectConfigVerbosity = x00'
+          , projectConfigDryRun = x01'
+          , projectConfigOnlyDeps = x02'
+          , projectConfigOnlyDownload = x18'
+          , projectConfigSummaryFile = x03'
+          , projectConfigLogFile = x04'
+          , projectConfigBuildReports = x05'
+          , projectConfigReportPlanningFailure = x06'
+          , projectConfigSymlinkBinDir = x07'
+          , projectConfigNumJobs = postShrink_NumJobs x09'
+          , projectConfigUseSemaphore = x19'
+          , projectConfigKeepGoing = x10'
+          , projectConfigOfflineMode = x11'
+          , projectConfigKeepTempFiles = x12'
+          , projectConfigHttpTransport = x13
+          , projectConfigIgnoreExpiry = x14'
+          , projectConfigCacheDir = x15
+          , projectConfigLogsDir = x16
+          , projectConfigClientInstallFlags = x17'
+          }
       | ( (x00', x01', x02', x03', x04')
           , (x05', x06', x07', x09')
           , (x10', x11', x12', x14')
@@ -803,68 +803,68 @@ instance Arbitrary PackageConfig where
       , packageConfigBenchmarkOptions = x52
       } =
       [ PackageConfig
-        { packageConfigProgramPaths = postShrink_Paths x00'
-        , packageConfigProgramArgs = postShrink_Args x01'
-        , packageConfigProgramPathExtra = x02'
-        , packageConfigFlagAssignment = x03'
-        , packageConfigVanillaLib = x04'
-        , packageConfigSharedLib = x05'
-        , packageConfigStaticLib = x42'
-        , packageConfigDynExe = x06'
-        , packageConfigFullyStaticExe = x50'
-        , packageConfigProf = x07'
-        , packageConfigProfLib = x08'
-        , packageConfigProfExe = x09'
-        , packageConfigProfDetail = x10'
-        , packageConfigProfLibDetail = x11'
-        , packageConfigConfigureArgs = map getNonEmpty x12'
-        , packageConfigOptimization = x13'
-        , packageConfigProgPrefix = x14'
-        , packageConfigProgSuffix = x15'
-        , packageConfigExtraLibDirs = map getNonEmpty x16'
-        , packageConfigExtraLibDirsStatic = map getNonEmpty x53'
-        , packageConfigExtraFrameworkDirs = map getNonEmpty x17'
-        , packageConfigExtraIncludeDirs = map getNonEmpty x18'
-        , packageConfigGHCiLib = x19'
-        , packageConfigSplitSections = x20'
-        , packageConfigSplitObjs = x20_1'
-        , packageConfigStripExes = x21'
-        , packageConfigStripLibs = x22'
-        , packageConfigTests = x23'
-        , packageConfigBenchmarks = x24'
-        , packageConfigCoverage = x25'
-        , packageConfigRelocatable = x26'
-        , packageConfigDebugInfo = x27'
-        , packageConfigDumpBuildInfo = x27_1'
-        , packageConfigRunTests = x28'
-        , packageConfigDocumentation = x29'
-        , packageConfigHaddockHoogle = x30'
-        , packageConfigHaddockHtml = x31'
-        , packageConfigHaddockHtmlLocation = x32'
-        , packageConfigHaddockForeignLibs = x33'
-        , packageConfigHaddockExecutables = x33_1'
-        , packageConfigHaddockTestSuites = x34'
-        , packageConfigHaddockBenchmarks = x35'
-        , packageConfigHaddockInternal = x36'
-        , packageConfigHaddockCss = fmap getNonEmpty x37'
-        , packageConfigHaddockLinkedSource = x38'
-        , packageConfigHaddockQuickJump = x43'
-        , packageConfigHaddockHscolourCss = fmap getNonEmpty x39'
-        , packageConfigHaddockContents = x40'
-        , packageConfigHaddockForHackage = x41'
-        , packageConfigHaddockIndex = x54'
-        , packageConfigHaddockBaseUrl = x55'
-        , packageConfigHaddockLib = x56'
-        , packageConfigHaddockOutputDir = x57'
-        , packageConfigTestHumanLog = x44'
-        , packageConfigTestMachineLog = x45'
-        , packageConfigTestShowDetails = x46'
-        , packageConfigTestKeepTix = x47'
-        , packageConfigTestWrapper = x48'
-        , packageConfigTestFailWhenNoTestSuites = x49'
-        , packageConfigTestTestOptions = x51'
-        , packageConfigBenchmarkOptions = x52'
-        }
+          { packageConfigProgramPaths = postShrink_Paths x00'
+          , packageConfigProgramArgs = postShrink_Args x01'
+          , packageConfigProgramPathExtra = x02'
+          , packageConfigFlagAssignment = x03'
+          , packageConfigVanillaLib = x04'
+          , packageConfigSharedLib = x05'
+          , packageConfigStaticLib = x42'
+          , packageConfigDynExe = x06'
+          , packageConfigFullyStaticExe = x50'
+          , packageConfigProf = x07'
+          , packageConfigProfLib = x08'
+          , packageConfigProfExe = x09'
+          , packageConfigProfDetail = x10'
+          , packageConfigProfLibDetail = x11'
+          , packageConfigConfigureArgs = map getNonEmpty x12'
+          , packageConfigOptimization = x13'
+          , packageConfigProgPrefix = x14'
+          , packageConfigProgSuffix = x15'
+          , packageConfigExtraLibDirs = map getNonEmpty x16'
+          , packageConfigExtraLibDirsStatic = map getNonEmpty x53'
+          , packageConfigExtraFrameworkDirs = map getNonEmpty x17'
+          , packageConfigExtraIncludeDirs = map getNonEmpty x18'
+          , packageConfigGHCiLib = x19'
+          , packageConfigSplitSections = x20'
+          , packageConfigSplitObjs = x20_1'
+          , packageConfigStripExes = x21'
+          , packageConfigStripLibs = x22'
+          , packageConfigTests = x23'
+          , packageConfigBenchmarks = x24'
+          , packageConfigCoverage = x25'
+          , packageConfigRelocatable = x26'
+          , packageConfigDebugInfo = x27'
+          , packageConfigDumpBuildInfo = x27_1'
+          , packageConfigRunTests = x28'
+          , packageConfigDocumentation = x29'
+          , packageConfigHaddockHoogle = x30'
+          , packageConfigHaddockHtml = x31'
+          , packageConfigHaddockHtmlLocation = x32'
+          , packageConfigHaddockForeignLibs = x33'
+          , packageConfigHaddockExecutables = x33_1'
+          , packageConfigHaddockTestSuites = x34'
+          , packageConfigHaddockBenchmarks = x35'
+          , packageConfigHaddockInternal = x36'
+          , packageConfigHaddockCss = fmap getNonEmpty x37'
+          , packageConfigHaddockLinkedSource = x38'
+          , packageConfigHaddockQuickJump = x43'
+          , packageConfigHaddockHscolourCss = fmap getNonEmpty x39'
+          , packageConfigHaddockContents = x40'
+          , packageConfigHaddockForHackage = x41'
+          , packageConfigHaddockIndex = x54'
+          , packageConfigHaddockBaseUrl = x55'
+          , packageConfigHaddockLib = x56'
+          , packageConfigHaddockOutputDir = x57'
+          , packageConfigTestHumanLog = x44'
+          , packageConfigTestMachineLog = x45'
+          , packageConfigTestShowDetails = x46'
+          , packageConfigTestKeepTix = x47'
+          , packageConfigTestWrapper = x48'
+          , packageConfigTestFailWhenNoTestSuites = x49'
+          , packageConfigTestTestOptions = x51'
+          , packageConfigBenchmarkOptions = x52'
+          }
       | ( ( (x00', x01', x02', x03', x04')
             , (x05', x42', x06', x50', x07', x08', x09')
             , (x10', x11', x12', x13', x14')
diff --git a/cabal-install/tests/UnitTests/Distribution/Client/VCS.hs b/cabal-install/tests/UnitTests/Distribution/Client/VCS.hs
index 0bd4935..3bd9fea 100644
--- a/cabal-install/tests/UnitTests/Distribution/Client/VCS.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Client/VCS.hs
@@ -710,8 +710,8 @@ getDirectoryContentsRecursive ignore dir0 dir = do
   entries' <-
     sequence
       [ do
-        isdir <- doesDirectoryExist (dir0 </> dir </> entry)
-        return (dir </> entry, isdir)
+          isdir <- doesDirectoryExist (dir0 </> dir </> entry)
+          return (dir </> entry, isdir)
       | entry <- entries
       , not (isPrefixOf "." entry)
       , (dir </> entry) `Set.notMember` ignore
@@ -835,8 +835,8 @@ data VCSTestDriver = VCSTestDriver
   , vcsSwitchBranch :: RepoState -> BranchName -> IO ()
   , vcsCheckoutTag
       :: Either
-          (TagName -> IO ())
-          (TagName -> FilePath -> IO ())
+           (TagName -> IO ())
+           (TagName -> FilePath -> IO ())
   }
 
 vcsTestDriverGit
diff --git a/cabal-install/tests/UnitTests/Distribution/Solver/Modular/Solver.hs b/cabal-install/tests/UnitTests/Distribution/Solver/Modular/Solver.hs
index 3d5b965..4582590 100644
--- a/cabal-install/tests/UnitTests/Distribution/Solver/Modular/Solver.hs
+++ b/cabal-install/tests/UnitTests/Distribution/Solver/Modular/Solver.hs
@@ -1994,19 +1994,19 @@ dbBuildable1 =
         , exFlagged "flag2" [ExAny "flag2-true"] [ExAny "flag2-false"]
         ]
         `withExes` [ exExe
-                      "exe1"
-                      [ ExAny "unknown"
-                      , ExFlagged "flag1" (dependencies []) unbuildableDependencies
-                      , ExFlagged "flag2" (dependencies []) unbuildableDependencies
-                      ]
+                       "exe1"
+                       [ ExAny "unknown"
+                       , ExFlagged "flag1" (dependencies []) unbuildableDependencies
+                       , ExFlagged "flag2" (dependencies []) unbuildableDependencies
+                       ]
                    , exExe
-                      "exe2"
-                      [ ExAny "unknown"
-                      , ExFlagged
-                          "flag1"
-                          (dependencies [])
-                          (dependencies [ExFlagged "flag2" unbuildableDependencies (dependencies [])])
-                      ]
+                       "exe2"
+                       [ ExAny "unknown"
+                       , ExFlagged
+                           "flag1"
+                           (dependencies [])
+                           (dependencies [ExFlagged "flag2" unbuildableDependencies (dependencies [])])
+                       ]
                    ]
   , Right $ exAv "flag1-true" 1 []
   , Right $ exAv "flag1-false" 1 []
